/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 26 16:43:08 GMT 2020
 */

package com.puppycrawl.tools.checkstyle.checks;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.ArrayTypeStyleCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArrayTypeStyleCheck_ESTest extends ArrayTypeStyleCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayTypeStyleCheck arrayTypeStyleCheck0 = new ArrayTypeStyleCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(1702).when(detailAST0).getType();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).getParent();
      arrayTypeStyleCheck0.visitToken(detailAST1);
      assertFalse(arrayTypeStyleCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayTypeStyleCheck arrayTypeStyleCheck0 = new ArrayTypeStyleCheck();
      int[] intArray0 = arrayTypeStyleCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {17}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayTypeStyleCheck arrayTypeStyleCheck0 = new ArrayTypeStyleCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getColumnNo();
      doReturn(41).when(detailAST0).getLineNo();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(41).when(detailAST1).getType();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST2).getNextSibling();
      doReturn(detailAST1).when(detailAST2).getParent();
      doReturn(13).when(detailAST2).getType();
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST3).getColumnNo();
      doReturn(1115).when(detailAST3).getLineNo();
      doReturn(detailAST2).when(detailAST3).getParent();
      arrayTypeStyleCheck0.visitToken(detailAST3);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayTypeStyleCheck arrayTypeStyleCheck0 = new ArrayTypeStyleCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST2).getNextSibling();
      doReturn((DetailAST) null).when(detailAST2).getParent();
      doReturn(13).when(detailAST2).getType();
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST2).when(detailAST3).getParent();
      // Undeclared exception!
      try { 
        arrayTypeStyleCheck0.visitToken(detailAST3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.ArrayTypeStyleCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(9).when(detailAST0).getLineNo();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(9).when(detailAST1).getType();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST2).getNextSibling();
      doReturn(detailAST1).when(detailAST2).getParent();
      doReturn(13).when(detailAST2).getType();
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-255)).when(detailAST3).getLineNo();
      doReturn(detailAST2).when(detailAST3).getParent();
      ArrayTypeStyleCheck arrayTypeStyleCheck0 = new ArrayTypeStyleCheck();
      arrayTypeStyleCheck0.visitToken(detailAST3);
      assertNull(arrayTypeStyleCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayTypeStyleCheck arrayTypeStyleCheck0 = new ArrayTypeStyleCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getNextSibling();
      doReturn(13).when(detailAST0).getType();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).getParent();
      arrayTypeStyleCheck0.visitToken(detailAST1);
      assertNull(arrayTypeStyleCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayTypeStyleCheck arrayTypeStyleCheck0 = new ArrayTypeStyleCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getColumnNo();
      doReturn(0).when(detailAST0).getLineNo();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST1).getType();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST2).getNextSibling();
      doReturn(detailAST1).when(detailAST2).getParent();
      doReturn(13).when(detailAST2).getType();
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST3).getColumnNo();
      doReturn(0).when(detailAST3).getLineNo();
      doReturn(detailAST2).when(detailAST3).getParent();
      arrayTypeStyleCheck0.visitToken(detailAST3);
      assertFalse(arrayTypeStyleCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayTypeStyleCheck arrayTypeStyleCheck0 = new ArrayTypeStyleCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(6).when(detailAST0).getType();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).getParent();
      arrayTypeStyleCheck0.visitToken(detailAST1);
      assertEquals(SeverityLevel.ERROR, arrayTypeStyleCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayTypeStyleCheck arrayTypeStyleCheck0 = new ArrayTypeStyleCheck();
      arrayTypeStyleCheck0.setJavaStyle(true);
      assertNull(arrayTypeStyleCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayTypeStyleCheck arrayTypeStyleCheck0 = new ArrayTypeStyleCheck();
      int[] intArray0 = arrayTypeStyleCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {17}, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayTypeStyleCheck arrayTypeStyleCheck0 = new ArrayTypeStyleCheck();
      int[] intArray0 = arrayTypeStyleCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {17}, intArray0);
  }
}
