/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 26 16:06:56 GMT 2020
 */

package com.puppycrawl.tools.checkstyle.checks.indentation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel;
import com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BlockParentHandler_ESTest extends BlockParentHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AbstractExpressionHandler abstractExpressionHandler0 = mock(AbstractExpressionHandler.class, new ViolatedAssumptionAnswer());
      BlockParentHandler blockParentHandler0 = new BlockParentHandler((IndentationCheck) null, "ctor def", (DetailAST) null, abstractExpressionHandler0);
      blockParentHandler0.checkTopLevelToken();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AbstractExpressionHandler abstractExpressionHandler0 = mock(AbstractExpressionHandler.class, new ViolatedAssumptionAnswer());
      BlockParentHandler blockParentHandler0 = new BlockParentHandler((IndentationCheck) null, "ctor def", (DetailAST) null, abstractExpressionHandler0);
      DetailAST detailAST0 = blockParentHandler0.getTopLevelAst();
      assertNull(detailAST0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).findFirstToken(anyInt());
      doReturn(0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null).when(detailAST0).getNextSibling();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).findFirstToken(anyInt());
      doReturn(0).when(detailAST1).getColumnNo();
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      DetailAST detailAST2 = AbstractExpressionHandler.getFirstToken(detailAST1);
      AbstractExpressionHandler abstractExpressionHandler0 = mock(AbstractExpressionHandler.class, new ViolatedAssumptionAnswer());
      BlockParentHandler blockParentHandler0 = new BlockParentHandler(indentationCheck0, "ident", detailAST2, abstractExpressionHandler0);
      DetailAST detailAST3 = blockParentHandler0.getRightCurly();
      assertNull(detailAST3);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getNextSibling();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).findFirstToken(anyInt());
      doReturn(0).when(detailAST1).getColumnNo();
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      DetailAST detailAST2 = AbstractExpressionHandler.getFirstToken(detailAST1);
      AbstractExpressionHandler abstractExpressionHandler0 = mock(AbstractExpressionHandler.class, new ViolatedAssumptionAnswer());
      BlockParentHandler blockParentHandler0 = new BlockParentHandler(indentationCheck0, "indentation.child.error", detailAST2, abstractExpressionHandler0);
      DetailAST detailAST3 = blockParentHandler0.getNonListChild();
      assertNull(detailAST3);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AbstractExpressionHandler abstractExpressionHandler0 = mock(AbstractExpressionHandler.class, new ViolatedAssumptionAnswer());
      BlockParentHandler blockParentHandler0 = new BlockParentHandler((IndentationCheck) null, (String) null, (DetailAST) null, abstractExpressionHandler0);
      // Undeclared exception!
      try { 
        blockParentHandler0.getListChild();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      AbstractExpressionHandler abstractExpressionHandler0 = mock(AbstractExpressionHandler.class, new ViolatedAssumptionAnswer());
      BlockParentHandler blockParentHandler0 = new BlockParentHandler(indentationCheck0, "", (DetailAST) null, abstractExpressionHandler0);
      // Undeclared exception!
      try { 
        blockParentHandler0.getLeftCurly();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(indentationCheck0).getBasicOffset();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      AbstractExpressionHandler abstractExpressionHandler0 = mock(AbstractExpressionHandler.class, new ViolatedAssumptionAnswer());
      doReturn((IndentLevel) null).when(abstractExpressionHandler0).getSuggestedChildIndent(any(com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.class));
      BlockParentHandler blockParentHandler0 = new BlockParentHandler(indentationCheck0, "indentation.child.error", detailAST1, abstractExpressionHandler0);
      // Undeclared exception!
      try { 
        blockParentHandler0.getChildrenExpectedIndent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(indentationCheck0).getLine(anyInt());
      doReturn(0).when(indentationCheck0).getIndentationTabWidth();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(0).when(detailAST0).getLineNo();
      doReturn("ACFzkZr=1n;iS^").when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      AbstractExpressionHandler abstractExpressionHandler0 = mock(AbstractExpressionHandler.class, new ViolatedAssumptionAnswer());
      doReturn((IndentLevel) null).when(abstractExpressionHandler0).getSuggestedChildIndent(any(com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.class));
      BlockParentHandler blockParentHandler0 = new BlockParentHandler(indentationCheck0, "l", detailAST1, abstractExpressionHandler0);
      // Undeclared exception!
      try { 
        blockParentHandler0.checkTopLevelToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(indentationCheck0).getLine(anyInt());
      doReturn(0).when(indentationCheck0).getIndentationTabWidth();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(0).when(detailAST0).getLineNo();
      doReturn("").when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      AbstractExpressionHandler abstractExpressionHandler0 = mock(AbstractExpressionHandler.class, new ViolatedAssumptionAnswer());
      doReturn((IndentLevel) null).when(abstractExpressionHandler0).getSuggestedChildIndent(any(com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.class));
      BlockParentHandler blockParentHandler0 = new BlockParentHandler(indentationCheck0, "cG\"`:&+QdQ@t e", detailAST1, abstractExpressionHandler0);
      // Undeclared exception!
      try { 
        blockParentHandler0.checkIndentation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      BlockParentHandler blockParentHandler0 = new BlockParentHandler(indentationCheck0, "indentation.error.multi", detailAST1, (AbstractExpressionHandler) null);
      // Undeclared exception!
      try { 
        blockParentHandler0.checkTopLevelToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).findFirstToken(anyInt());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      BlockParentHandler blockParentHandler0 = new BlockParentHandler(indentationCheck0, "indentation.child.error.multi", detailAST1, (AbstractExpressionHandler) null);
      // Undeclared exception!
      try { 
        blockParentHandler0.getRightCurly();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).findFirstToken(anyInt());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      AbstractExpressionHandler abstractExpressionHandler0 = mock(AbstractExpressionHandler.class, new ViolatedAssumptionAnswer());
      BlockParentHandler blockParentHandler0 = new BlockParentHandler(indentationCheck0, "IhhZVd(Y+J:", detailAST1, abstractExpressionHandler0);
      DetailAST detailAST2 = blockParentHandler0.getListChild();
      assertNull(detailAST2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      AbstractExpressionHandler abstractExpressionHandler0 = mock(AbstractExpressionHandler.class, new ViolatedAssumptionAnswer());
      BlockParentHandler blockParentHandler0 = new BlockParentHandler(indentationCheck0, "IhhZVd(Y+J:", detailAST1, abstractExpressionHandler0);
      boolean boolean0 = blockParentHandler0.canChildrenBeNested();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getNextSibling();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(165).when(detailAST1).getColumnNo();
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      doReturn(detailAST0).when(detailAST1).getNextSibling();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(165).when(detailAST2).getColumnNo();
      doReturn(detailAST1).when(detailAST2).getFirstChild();
      DetailAST detailAST3 = AbstractExpressionHandler.getFirstToken(detailAST2);
      AbstractExpressionHandler abstractExpressionHandler0 = mock(AbstractExpressionHandler.class, new ViolatedAssumptionAnswer());
      doReturn((IndentLevel) null).when(abstractExpressionHandler0).getSuggestedChildIndent(any(com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.class));
      BlockParentHandler blockParentHandler0 = new BlockParentHandler((IndentationCheck) null, "indentation.child.error.multi", detailAST3, abstractExpressionHandler0);
      // Undeclared exception!
      try { 
        blockParentHandler0.getSuggestedChildIndent(blockParentHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).findFirstToken(anyInt());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      AbstractExpressionHandler abstractExpressionHandler0 = mock(AbstractExpressionHandler.class, new ViolatedAssumptionAnswer());
      BlockParentHandler blockParentHandler0 = new BlockParentHandler(indentationCheck0, "IhhZVd(Y+J:", detailAST1, abstractExpressionHandler0);
      // Undeclared exception!
      try { 
        blockParentHandler0.getNonListChild();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(indentationCheck0).getBraceAdjustment();
      AbstractExpressionHandler abstractExpressionHandler0 = mock(AbstractExpressionHandler.class, new ViolatedAssumptionAnswer());
      doReturn((IndentLevel) null).when(abstractExpressionHandler0).getSuggestedChildIndent(any(com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.class));
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      BlockParentHandler blockParentHandler0 = new BlockParentHandler(indentationCheck0, "I '%`$z{knFZz&", detailAST1, abstractExpressionHandler0);
      // Undeclared exception!
      try { 
        blockParentHandler0.curlyIndent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      AbstractExpressionHandler abstractExpressionHandler0 = mock(AbstractExpressionHandler.class, new ViolatedAssumptionAnswer());
      BlockParentHandler blockParentHandler0 = new BlockParentHandler(indentationCheck0, "IhhZVd(Y+J:", detailAST1, abstractExpressionHandler0);
      int[] intArray0 = blockParentHandler0.getCheckedChildren();
      assertArrayEquals(new int[] {10, 28, 6, 86, 88, 90, 87, 43, 42}, intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).findFirstToken(anyInt());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      AbstractExpressionHandler abstractExpressionHandler0 = mock(AbstractExpressionHandler.class, new ViolatedAssumptionAnswer());
      BlockParentHandler blockParentHandler0 = new BlockParentHandler(indentationCheck0, "IhhZVd(Y+J:", detailAST1, abstractExpressionHandler0);
      DetailAST detailAST2 = blockParentHandler0.getLeftCurly();
      assertNull(detailAST2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      AbstractExpressionHandler abstractExpressionHandler0 = mock(AbstractExpressionHandler.class, new ViolatedAssumptionAnswer());
      BlockParentHandler blockParentHandler0 = new BlockParentHandler(indentationCheck0, "|s-sf", (DetailAST) null, abstractExpressionHandler0);
      // Undeclared exception!
      try { 
        blockParentHandler0.checkIndentation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler", e);
      }
  }
}
