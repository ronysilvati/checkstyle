/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 26 16:05:40 GMT 2020
 */

package com.puppycrawl.tools.checkstyle.checks.metrics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.metrics.BooleanExpressionComplexityCheck;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BooleanExpressionComplexityCheck_ESTest extends BooleanExpressionComplexityCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(91).when(detailAST0).getType();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST1).getParent();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0, detailAST1).when(detailAST2).getParent();
      doReturn(112).when(detailAST2).getType();
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      // Undeclared exception!
      try { 
        booleanExpressionComplexityCheck0.visitToken(detailAST2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.metrics.BooleanExpressionComplexityCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(28).when(detailAST0).getType();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(28).when(detailAST1).getType();
      booleanExpressionComplexityCheck0.visitToken(detailAST1);
      booleanExpressionComplexityCheck0.leaveToken(detailAST0);
      assertFalse(booleanExpressionComplexityCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      // Undeclared exception!
      try { 
        booleanExpressionComplexityCheck0.leaveToken((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.metrics.BooleanExpressionComplexityCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-754)).when(detailAST0).getType();
      booleanExpressionComplexityCheck0.leaveToken(detailAST0);
      assertEquals(SeverityLevel.ERROR, booleanExpressionComplexityCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(detailAST0).getType();
      // Undeclared exception!
      try { 
        booleanExpressionComplexityCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(34).when(detailAST0).getType();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).getParent();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST1).when(detailAST2).getParent();
      doReturn(113).when(detailAST2).getType();
      booleanExpressionComplexityCheck0.visitToken(detailAST2);
      assertEquals(SeverityLevel.ERROR, booleanExpressionComplexityCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(34).when(detailAST0).getType();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(6).when(detailAST1).getType();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST2).getParent();
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST1, detailAST2).when(detailAST3).getParent();
      doReturn(112).when(detailAST3).getType();
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      booleanExpressionComplexityCheck0.visitToken(detailAST3);
      assertFalse(booleanExpressionComplexityCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getType();
      doReturn((String) null).when(detailAST0).toString();
      // Undeclared exception!
      try { 
        booleanExpressionComplexityCheck0.visitToken(detailAST0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown type: null
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.metrics.BooleanExpressionComplexityCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getType();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(7).when(detailAST1).getType();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST2).getParent();
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST1, detailAST2).when(detailAST3).getParent();
      doReturn(112).when(detailAST3).getType();
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      booleanExpressionComplexityCheck0.visitToken(detailAST3);
      assertFalse(booleanExpressionComplexityCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(110).when(detailAST0).getType();
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      booleanExpressionComplexityCheck0.visitToken(detailAST0);
      assertNull(booleanExpressionComplexityCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(9, 0).when(detailAST0).getType();
      booleanExpressionComplexityCheck0.visitToken(detailAST0);
      assertFalse(booleanExpressionComplexityCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(8, 8).when(detailAST0).getType();
      booleanExpressionComplexityCheck0.visitToken(detailAST0);
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(detailAST1).getType();
      booleanExpressionComplexityCheck0.leaveToken(detailAST1);
      assertEquals(SeverityLevel.ERROR, booleanExpressionComplexityCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      int[] intArray0 = booleanExpressionComplexityCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {8, 9, 28, 111, 114, 110, 112, 113}, intArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      int[] intArray0 = booleanExpressionComplexityCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {8, 9, 28}, intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      booleanExpressionComplexityCheck0.setMax(0);
      assertEquals(SeverityLevel.ERROR, booleanExpressionComplexityCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(9).when(detailAST0).getType();
      // Undeclared exception!
      try { 
        booleanExpressionComplexityCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      int[] intArray0 = booleanExpressionComplexityCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {8, 9, 28, 111, 114, 110, 112, 113}, intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BooleanExpressionComplexityCheck booleanExpressionComplexityCheck0 = new BooleanExpressionComplexityCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(114).when(detailAST0).getType();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).getParent();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST1).when(detailAST2).getParent();
      doReturn(114).when(detailAST2).getType();
      booleanExpressionComplexityCheck0.visitToken(detailAST2);
      assertFalse(booleanExpressionComplexityCheck0.isCommentNodesRequired());
  }
}
