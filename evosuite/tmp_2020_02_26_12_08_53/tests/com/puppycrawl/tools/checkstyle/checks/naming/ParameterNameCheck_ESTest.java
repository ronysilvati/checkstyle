/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 26 18:35:13 GMT 2020
 */

package com.puppycrawl.tools.checkstyle.checks.naming;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.DetailAstImpl;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifier;
import com.puppycrawl.tools.checkstyle.checks.naming.ParameterNameCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ParameterNameCheck_ESTest extends ParameterNameCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ParameterNameCheck parameterNameCheck0 = new ParameterNameCheck();
      // Undeclared exception!
      try { 
        parameterNameCheck0.setAccessModifiers((AccessModifier[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.naming.ParameterNameCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ParameterNameCheck parameterNameCheck0 = new ParameterNameCheck();
      int[] intArray0 = parameterNameCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {21}, intArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ParameterNameCheck parameterNameCheck0 = new ParameterNameCheck();
      DetailAstImpl detailAstImpl0 = new DetailAstImpl();
      // Undeclared exception!
      try { 
        parameterNameCheck0.mustCheckName(detailAstImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.naming.ParameterNameCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ParameterNameCheck parameterNameCheck0 = new ParameterNameCheck();
      parameterNameCheck0.setIgnoreOverridden(true);
      // Undeclared exception!
      try { 
        parameterNameCheck0.mustCheckName((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.naming.ParameterNameCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ParameterNameCheck parameterNameCheck0 = new ParameterNameCheck();
      int[] intArray0 = parameterNameCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {21}, intArray0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ParameterNameCheck parameterNameCheck0 = new ParameterNameCheck();
      int[] intArray0 = parameterNameCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {21}, intArray0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ParameterNameCheck parameterNameCheck0 = new ParameterNameCheck();
      AccessModifier[] accessModifierArray0 = new AccessModifier[5];
      parameterNameCheck0.setAccessModifiers(accessModifierArray0);
      assertFalse(parameterNameCheck0.isCommentNodesRequired());
  }
}
