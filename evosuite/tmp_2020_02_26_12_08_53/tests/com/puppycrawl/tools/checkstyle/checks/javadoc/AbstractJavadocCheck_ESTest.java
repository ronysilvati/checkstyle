/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 26 15:59:34 GMT 2020
 */

package com.puppycrawl.tools.checkstyle.checks.javadoc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.DetailAstImpl;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.DetailNode;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheckTest;
import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocNodeImpl;
import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocParagraphCheck;
import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagContinuationIndentationCheck;
import com.puppycrawl.tools.checkstyle.checks.javadoc.SingleLineJavadocCheck;
import com.puppycrawl.tools.checkstyle.checks.javadoc.SummaryJavadocCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractJavadocCheck_ESTest extends AbstractJavadocCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JavadocParagraphCheck javadocParagraphCheck0 = new JavadocParagraphCheck();
      javadocParagraphCheck0.init();
      assertTrue(javadocParagraphCheck0.acceptJavadocWithNonTightHtml());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AbstractJavadocCheckTest.JavadocVisitLeaveCheck abstractJavadocCheckTest_JavadocVisitLeaveCheck0 = new AbstractJavadocCheckTest.JavadocVisitLeaveCheck();
      abstractJavadocCheckTest_JavadocVisitLeaveCheck0.visitJavadocToken((DetailNode) null);
      assertNull(abstractJavadocCheckTest_JavadocVisitLeaveCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AbstractJavadocCheckTest.JavadocVisitLeaveCheck abstractJavadocCheckTest_JavadocVisitLeaveCheck0 = new AbstractJavadocCheckTest.JavadocVisitLeaveCheck();
      int[] intArray0 = abstractJavadocCheckTest_JavadocVisitLeaveCheck0.getRequiredJavadocTokens();
      assertArrayEquals(new int[] {10074}, intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AbstractJavadocCheckTest.JavadocVisitLeaveCheck abstractJavadocCheckTest_JavadocVisitLeaveCheck0 = new AbstractJavadocCheckTest.JavadocVisitLeaveCheck();
      int[] intArray0 = abstractJavadocCheckTest_JavadocVisitLeaveCheck0.getDefaultJavadocTokens();
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AbstractJavadocCheckTest.TempCheck abstractJavadocCheckTest_TempCheck0 = new AbstractJavadocCheckTest.TempCheck();
      int[] intArray0 = abstractJavadocCheckTest_TempCheck0.getDefaultJavadocTokens();
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AbstractJavadocCheckTest.RequiredTokenIsNotInDefaultsJavadocCheck abstractJavadocCheckTest_RequiredTokenIsNotInDefaultsJavadocCheck0 = new AbstractJavadocCheckTest.RequiredTokenIsNotInDefaultsJavadocCheck();
      int[] intArray0 = abstractJavadocCheckTest_RequiredTokenIsNotInDefaultsJavadocCheck0.getAcceptableJavadocTokens();
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AbstractJavadocCheckTest.NonTightHtmlTagIntolerantCheck abstractJavadocCheckTest_NonTightHtmlTagIntolerantCheck0 = new AbstractJavadocCheckTest.NonTightHtmlTagIntolerantCheck();
      boolean boolean0 = abstractJavadocCheckTest_NonTightHtmlTagIntolerantCheck0.acceptJavadocWithNonTightHtml();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SummaryJavadocCheck summaryJavadocCheck0 = new SummaryJavadocCheck();
      DetailAstImpl detailAstImpl0 = new DetailAstImpl();
      // Undeclared exception!
      try { 
        summaryJavadocCheck0.visitToken(detailAstImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.JavadocUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SingleLineJavadocCheck singleLineJavadocCheck0 = new SingleLineJavadocCheck();
      JavadocNodeImpl javadocNodeImpl0 = new JavadocNodeImpl();
      // Undeclared exception!
      try { 
        singleLineJavadocCheck0.visitJavadocToken(javadocNodeImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.javadoc.SingleLineJavadocCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JavadocParagraphCheck javadocParagraphCheck0 = new JavadocParagraphCheck();
      // Undeclared exception!
      try { 
        javadocParagraphCheck0.setJavadocTokens((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AbstractJavadocCheckTest.JavadocCatchCheck abstractJavadocCheckTest_JavadocCatchCheck0 = new AbstractJavadocCheckTest.JavadocCatchCheck();
      int[] intArray0 = abstractJavadocCheckTest_JavadocCatchCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {145}, intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AbstractJavadocCheckTest.TempCheck abstractJavadocCheckTest_TempCheck0 = new AbstractJavadocCheckTest.TempCheck();
      int[] intArray0 = abstractJavadocCheckTest_TempCheck0.getRequiredJavadocTokens();
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AbstractJavadocCheckTest.NonTightHtmlTagIntolerantCheck abstractJavadocCheckTest_NonTightHtmlTagIntolerantCheck0 = new AbstractJavadocCheckTest.NonTightHtmlTagIntolerantCheck();
      int[] intArray0 = abstractJavadocCheckTest_NonTightHtmlTagIntolerantCheck0.getAcceptableJavadocTokens();
      assertArrayEquals(new int[] {10006, 10009, 10021}, intArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AbstractJavadocCheckTest.RequiredTokenIsNotInDefaultsJavadocCheck abstractJavadocCheckTest_RequiredTokenIsNotInDefaultsJavadocCheck0 = new AbstractJavadocCheckTest.RequiredTokenIsNotInDefaultsJavadocCheck();
      // Undeclared exception!
      try { 
        abstractJavadocCheckTest_RequiredTokenIsNotInDefaultsJavadocCheck0.init();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Javadoc Token \"11\" from required javadoc tokens was not found in default javadoc tokens list in check com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheckTest$RequiredTokenIsNotInDefaultsJavadocCheck
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SummaryJavadocCheck summaryJavadocCheck0 = new SummaryJavadocCheck();
      summaryJavadocCheck0.init();
      summaryJavadocCheck0.init();
      assertEquals(SeverityLevel.ERROR, summaryJavadocCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AbstractJavadocCheckTest.RequiredTokenIsNotInDefaultsJavadocCheck abstractJavadocCheckTest_RequiredTokenIsNotInDefaultsJavadocCheck0 = new AbstractJavadocCheckTest.RequiredTokenIsNotInDefaultsJavadocCheck();
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        abstractJavadocCheckTest_RequiredTokenIsNotInDefaultsJavadocCheck0.setJavadocTokens(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown javadoc token name. Given name null
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.JavadocUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AbstractJavadocCheckTest.JavadocVisitLeaveCheck abstractJavadocCheckTest_JavadocVisitLeaveCheck0 = new AbstractJavadocCheckTest.JavadocVisitLeaveCheck();
      String[] stringArray0 = new String[0];
      abstractJavadocCheckTest_JavadocVisitLeaveCheck0.setJavadocTokens(stringArray0);
      assertNull(abstractJavadocCheckTest_JavadocVisitLeaveCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AbstractJavadocCheckTest.TokenIsNotInAcceptablesJavadocCheck abstractJavadocCheckTest_TokenIsNotInAcceptablesJavadocCheck0 = new AbstractJavadocCheckTest.TokenIsNotInAcceptablesJavadocCheck();
      JavadocNodeImpl javadocNodeImpl0 = new JavadocNodeImpl();
      abstractJavadocCheckTest_TokenIsNotInAcceptablesJavadocCheck0.beginJavadocTree(javadocNodeImpl0);
      assertNull(javadocNodeImpl0.getText());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AbstractJavadocCheckTest.JavadocCatchCheck abstractJavadocCheckTest_JavadocCatchCheck0 = new AbstractJavadocCheckTest.JavadocCatchCheck();
      abstractJavadocCheckTest_JavadocCatchCheck0.destroy();
      assertTrue(abstractJavadocCheckTest_JavadocCatchCheck0.acceptJavadocWithNonTightHtml());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JavadocTagContinuationIndentationCheck javadocTagContinuationIndentationCheck0 = new JavadocTagContinuationIndentationCheck();
      JavadocNodeImpl javadocNodeImpl0 = new JavadocNodeImpl();
      javadocTagContinuationIndentationCheck0.leaveJavadocToken(javadocNodeImpl0);
      assertEquals(0, javadocNodeImpl0.getIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AbstractJavadocCheckTest.JavadocCatchCheck abstractJavadocCheckTest_JavadocCatchCheck0 = new AbstractJavadocCheckTest.JavadocCatchCheck();
      abstractJavadocCheckTest_JavadocCatchCheck0.beginTree((DetailAST) null);
      assertTrue(abstractJavadocCheckTest_JavadocCatchCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SummaryJavadocCheck summaryJavadocCheck0 = new SummaryJavadocCheck();
      boolean boolean0 = summaryJavadocCheck0.acceptJavadocWithNonTightHtml();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AbstractJavadocCheckTest.JavadocCatchCheck abstractJavadocCheckTest_JavadocCatchCheck0 = new AbstractJavadocCheckTest.JavadocCatchCheck();
      abstractJavadocCheckTest_JavadocCatchCheck0.setViolateExecutionOnNonTightHtml(false);
      assertTrue(abstractJavadocCheckTest_JavadocCatchCheck0.acceptJavadocWithNonTightHtml());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AbstractJavadocCheckTest.NonTightHtmlTagIntolerantCheck abstractJavadocCheckTest_NonTightHtmlTagIntolerantCheck0 = new AbstractJavadocCheckTest.NonTightHtmlTagIntolerantCheck();
      abstractJavadocCheckTest_NonTightHtmlTagIntolerantCheck0.init();
      abstractJavadocCheckTest_NonTightHtmlTagIntolerantCheck0.init();
      assertNull(abstractJavadocCheckTest_NonTightHtmlTagIntolerantCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AbstractJavadocCheckTest.RequiredTokenIsNotInDefaultsJavadocCheck abstractJavadocCheckTest_RequiredTokenIsNotInDefaultsJavadocCheck0 = new AbstractJavadocCheckTest.RequiredTokenIsNotInDefaultsJavadocCheck();
      JavadocNodeImpl javadocNodeImpl0 = new JavadocNodeImpl();
      abstractJavadocCheckTest_RequiredTokenIsNotInDefaultsJavadocCheck0.finishJavadocTree(javadocNodeImpl0);
      assertEquals(0, javadocNodeImpl0.getIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AbstractJavadocCheckTest.JavadocCatchCheck abstractJavadocCheckTest_JavadocCatchCheck0 = new AbstractJavadocCheckTest.JavadocCatchCheck();
      int[] intArray0 = abstractJavadocCheckTest_JavadocCatchCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {145}, intArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AbstractJavadocCheckTest.NonTightHtmlTagTolerantCheck abstractJavadocCheckTest_NonTightHtmlTagTolerantCheck0 = new AbstractJavadocCheckTest.NonTightHtmlTagTolerantCheck();
      abstractJavadocCheckTest_NonTightHtmlTagTolerantCheck0.finishTree((DetailAST) null);
      assertNull(abstractJavadocCheckTest_NonTightHtmlTagTolerantCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AbstractJavadocCheckTest.JavadocCatchCheck abstractJavadocCheckTest_JavadocCatchCheck0 = new AbstractJavadocCheckTest.JavadocCatchCheck();
      DetailAST detailAST0 = abstractJavadocCheckTest_JavadocCatchCheck0.getBlockCommentAst();
      assertNull(detailAST0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AbstractJavadocCheckTest.NonTightHtmlTagTolerantCheck abstractJavadocCheckTest_NonTightHtmlTagTolerantCheck0 = new AbstractJavadocCheckTest.NonTightHtmlTagTolerantCheck();
      int[] intArray0 = abstractJavadocCheckTest_NonTightHtmlTagTolerantCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {145}, intArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AbstractJavadocCheckTest.JavadocCatchCheck abstractJavadocCheckTest_JavadocCatchCheck0 = new AbstractJavadocCheckTest.JavadocCatchCheck();
      boolean boolean0 = abstractJavadocCheckTest_JavadocCatchCheck0.isCommentNodesRequired();
      assertTrue(boolean0);
  }
}
