/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 26 15:27:27 GMT 2020
 */

package com.puppycrawl.tools.checkstyle.checks.coding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.coding.ParameterAssignmentCheck;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ParameterAssignmentCheck_ESTest extends ParameterAssignmentCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      parameterAssignmentCheck0.beginTree((DetailAST) null);
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).findFirstToken(anyInt());
      doReturn(9).when(detailAST0).getType();
      // Undeclared exception!
      try { 
        parameterAssignmentCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.ParameterAssignmentCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      // Undeclared exception!
      try { 
        parameterAssignmentCheck0.leaveToken((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.ParameterAssignmentCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      int[] intArray0 = parameterAssignmentCheck0.getRequiredTokens();
      assertEquals(18, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getType();
      // Undeclared exception!
      try { 
        parameterAssignmentCheck0.leaveToken(detailAST0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // com.puppycrawl.tools.checkstyle.api.DetailAST$MockitoMock$1067054362@0000000002
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.ParameterAssignmentCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(130).when(detailAST0).getType();
      parameterAssignmentCheck0.leaveToken(detailAST0);
      assertNull(parameterAssignmentCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(129).when(detailAST0).getType();
      parameterAssignmentCheck0.leaveToken(detailAST0);
      assertEquals(SeverityLevel.ERROR, parameterAssignmentCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(108).when(detailAST0).getType();
      parameterAssignmentCheck0.leaveToken(detailAST0);
      assertNull(parameterAssignmentCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(107).when(detailAST0).getType();
      parameterAssignmentCheck0.leaveToken(detailAST0);
      assertFalse(parameterAssignmentCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(106).when(detailAST0).getType();
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      parameterAssignmentCheck0.leaveToken(detailAST0);
      assertFalse(parameterAssignmentCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(105).when(detailAST0).getType();
      parameterAssignmentCheck0.leaveToken(detailAST0);
      assertEquals(SeverityLevel.ERROR, parameterAssignmentCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(104).when(detailAST0).getType();
      parameterAssignmentCheck0.leaveToken(detailAST0);
      assertFalse(parameterAssignmentCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(103).when(detailAST0).getType();
      parameterAssignmentCheck0.leaveToken(detailAST0);
      assertEquals(SeverityLevel.ERROR, parameterAssignmentCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(102).when(detailAST0).getType();
      parameterAssignmentCheck0.leaveToken(detailAST0);
      assertNull(parameterAssignmentCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(101).when(detailAST0).getType();
      parameterAssignmentCheck0.leaveToken(detailAST0);
      assertEquals(SeverityLevel.ERROR, parameterAssignmentCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(100).when(detailAST0).getType();
      parameterAssignmentCheck0.leaveToken(detailAST0);
      assertNull(parameterAssignmentCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(99).when(detailAST0).getType();
      parameterAssignmentCheck0.leaveToken(detailAST0);
      assertNull(parameterAssignmentCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(98).when(detailAST0).getType();
      parameterAssignmentCheck0.leaveToken(detailAST0);
      assertFalse(parameterAssignmentCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(80).when(detailAST0).getType();
      parameterAssignmentCheck0.leaveToken(detailAST0);
      assertFalse(parameterAssignmentCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(26).when(detailAST0).getType();
      parameterAssignmentCheck0.leaveToken(detailAST0);
      assertNull(parameterAssignmentCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(25).when(detailAST0).getType();
      parameterAssignmentCheck0.leaveToken(detailAST0);
      assertEquals(SeverityLevel.ERROR, parameterAssignmentCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(detailAST0).getType();
      // Undeclared exception!
      try { 
        parameterAssignmentCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(85).when(detailAST0).getType();
      // Undeclared exception!
      try { 
        parameterAssignmentCheck0.visitToken(detailAST0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // com.puppycrawl.tools.checkstyle.api.DetailAST$MockitoMock$1067054362@0000000002
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.ParameterAssignmentCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(130).when(detailAST0).getType();
      parameterAssignmentCheck0.visitToken(detailAST0);
      assertFalse(parameterAssignmentCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(108).when(detailAST0).getType();
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      parameterAssignmentCheck0.visitToken(detailAST0);
      assertFalse(parameterAssignmentCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-1725)).when(detailAST0).getType();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      doReturn(107).when(detailAST1).getType();
      parameterAssignmentCheck0.visitToken(detailAST1);
      assertEquals(SeverityLevel.ERROR, parameterAssignmentCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(106).when(detailAST0).getType();
      parameterAssignmentCheck0.visitToken(detailAST0);
      assertNull(parameterAssignmentCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(105).when(detailAST0).getType();
      parameterAssignmentCheck0.visitToken(detailAST0);
      assertNull(parameterAssignmentCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(104).when(detailAST0).getType();
      parameterAssignmentCheck0.visitToken(detailAST0);
      assertEquals(SeverityLevel.ERROR, parameterAssignmentCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getType();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      doReturn(103).when(detailAST1).getType();
      parameterAssignmentCheck0.visitToken(detailAST1);
      assertEquals(SeverityLevel.ERROR, parameterAssignmentCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-1725)).when(detailAST0).getType();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      doReturn(101).when(detailAST1).getType();
      parameterAssignmentCheck0.visitToken(detailAST1);
      assertEquals(SeverityLevel.ERROR, parameterAssignmentCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(100).when(detailAST0).getType();
      parameterAssignmentCheck0.visitToken(detailAST0);
      assertEquals(SeverityLevel.ERROR, parameterAssignmentCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(99).when(detailAST0).getType();
      parameterAssignmentCheck0.visitToken(detailAST0);
      assertEquals(SeverityLevel.ERROR, parameterAssignmentCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(26).when(detailAST0).getType();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      doReturn(26).when(detailAST1).getType();
      parameterAssignmentCheck0.visitToken(detailAST1);
      assertEquals(SeverityLevel.ERROR, parameterAssignmentCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getType();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      doReturn(25).when(detailAST1).getType();
      parameterAssignmentCheck0.visitToken(detailAST1);
      assertFalse(parameterAssignmentCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(detailAST0).getType();
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      // Undeclared exception!
      try { 
        parameterAssignmentCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn("parameter.assignment").when(detailAST0).getText();
      doReturn(58).when(detailAST0).getType();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      doReturn(129).when(detailAST1).getType();
      // Undeclared exception!
      try { 
        parameterAssignmentCheck0.visitToken(detailAST1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      parameterAssignmentCheck0.beginTree(detailAST0);
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(detailAST1).getText();
      doReturn(58).when(detailAST1).getType();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST1).when(detailAST2).getFirstChild();
      doReturn(129).when(detailAST2).getType();
      parameterAssignmentCheck0.visitToken(detailAST2);
      assertEquals(SeverityLevel.ERROR, parameterAssignmentCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      int[] intArray0 = parameterAssignmentCheck0.getAcceptableTokens();
      assertEquals(18, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(9).when(detailAST0).getType();
      // Undeclared exception!
      try { 
        parameterAssignmentCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(102).when(detailAST0).getType();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      doReturn(102).when(detailAST1).getType();
      parameterAssignmentCheck0.visitToken(detailAST1);
      assertEquals(SeverityLevel.ERROR, parameterAssignmentCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ParameterAssignmentCheck parameterAssignmentCheck0 = new ParameterAssignmentCheck();
      int[] intArray0 = parameterAssignmentCheck0.getDefaultTokens();
      assertEquals(18, intArray0.length);
  }
}
