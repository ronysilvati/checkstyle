/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 26 15:43:42 GMT 2020
 */

package com.puppycrawl.tools.checkstyle;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.Checker;
import com.puppycrawl.tools.checkstyle.CheckerTest;
import com.puppycrawl.tools.checkstyle.ModuleFactory;
import com.puppycrawl.tools.checkstyle.api.AuditListener;
import com.puppycrawl.tools.checkstyle.api.BeforeExecutionFileFilter;
import com.puppycrawl.tools.checkstyle.api.BeforeExecutionFileFilterSet;
import com.puppycrawl.tools.checkstyle.api.Configuration;
import com.puppycrawl.tools.checkstyle.api.FileSetCheck;
import com.puppycrawl.tools.checkstyle.api.Filter;
import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter;
import java.io.File;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.InvalidPathException;
import java.util.Enumeration;
import java.util.List;
import java.util.SortedSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Checker_ESTest extends Checker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Checker checker0 = new Checker();
      checker0.setBasedir("general.exception");
      checker0.fireFileFinished("general.exception");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Checker checker0 = new Checker();
      checker0.setBasedir("general.exception");
      checker0.fireFileStarted("general.exception");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Checker checker0 = new Checker();
      Enumeration<URL> enumeration0 = (Enumeration<URL>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      ClassLoader classLoader0 = mock(ClassLoader.class, new ViolatedAssumptionAnswer());
      doReturn(enumeration0).when(classLoader0).getResources(anyString());
      checker0.setModuleClassLoader(classLoader0);
      checker0.finishLocalSetup();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Checker checker0 = new Checker();
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      doReturn("general.exception").when(configuration0).getName();
      // Undeclared exception!
      try { 
        checker0.setupChild(configuration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.Checker", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Checker checker0 = new Checker();
      // Undeclared exception!
      try { 
        checker0.setCharset("v8e$*ns\"I^9");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // v8e$*ns\"I^9
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Checker checker0 = new Checker();
      // Undeclared exception!
      try { 
        checker0.setCharset((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Checker checker0 = new Checker();
      checker0.setBasedir("[`<O5;");
      // Undeclared exception!
      try { 
        checker0.fireFileStarted("qHm+Mg^{{N");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Checker checker0 = new Checker();
      checker0.addListener((AuditListener) null);
      // Undeclared exception!
      try { 
        checker0.fireFileStarted("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.Checker", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Checker checker0 = new Checker();
      // Undeclared exception!
      try { 
        checker0.fireErrors((String) null, (SortedSet<LocalizedMessage>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.Checker", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Checker checker0 = new Checker();
      // Undeclared exception!
      try { 
        checker0.addFileSetCheck((FileSetCheck) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.Checker", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Checker checker0 = new Checker();
      // Undeclared exception!
      try { 
        checker0.setSeverity((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.SeverityLevel", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Checker checker0 = new Checker();
      checker0.clearCache();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Checker checker0 = new Checker();
      try { 
        checker0.setCharset("com.puppycrawl.tools.checkstyle.checks.coding.UnnecessarySemicolonInEnumerationCheck");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // unsupported charset: 'com.puppycrawl.tools.checkstyle.checks.coding.UnnecessarySemicolonInEnumerationCheck'
         //
         verifyException("com.puppycrawl.tools.checkstyle.Checker", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Checker checker0 = new Checker();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "2aW^yyAGXD;)";
      stringArray0[1] = "general.exception";
      stringArray0[2] = "general.exception";
      checker0.setFileExtensions(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Checker checker0 = new Checker();
      checker0.setFileExtensions((String[]) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Checker checker0 = new Checker();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        checker0.setFileExtensions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CommonUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Checker checker0 = new Checker();
      SeverityLevel severityLevel0 = SeverityLevel.IGNORE;
      SeverityLevelCounter severityLevelCounter0 = new SeverityLevelCounter(severityLevel0);
      ModuleFactory moduleFactory0 = mock(ModuleFactory.class, new ViolatedAssumptionAnswer());
      doReturn(severityLevelCounter0).when(moduleFactory0).createModule(anyString());
      checker0.setModuleFactory(moduleFactory0);
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      doReturn("2aW^yyAGXD;)").when(configuration0).getName();
      checker0.setupChild(configuration0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Checker checker0 = new Checker();
      CheckerTest.DummyFilterSet checkerTest_DummyFilterSet0 = new CheckerTest.DummyFilterSet();
      ModuleFactory moduleFactory0 = mock(ModuleFactory.class, new ViolatedAssumptionAnswer());
      doReturn(checkerTest_DummyFilterSet0).when(moduleFactory0).createModule(anyString());
      checker0.setModuleFactory(moduleFactory0);
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      doReturn("general.exception").when(configuration0).getName();
      checker0.setupChild(configuration0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Checker checker0 = new Checker();
      BeforeExecutionFileFilterSet beforeExecutionFileFilterSet0 = new BeforeExecutionFileFilterSet();
      ModuleFactory moduleFactory0 = mock(ModuleFactory.class, new ViolatedAssumptionAnswer());
      doReturn(beforeExecutionFileFilterSet0).when(moduleFactory0).createModule(anyString());
      checker0.setModuleFactory(moduleFactory0);
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      doReturn("general.exception").when(configuration0).getName();
      checker0.setupChild(configuration0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Checker checker0 = new Checker();
      ClassLoader classLoader0 = mock(ClassLoader.class, new ViolatedAssumptionAnswer());
      doReturn((Enumeration) null).when(classLoader0).getResources(anyString());
      checker0.setModuleClassLoader(classLoader0);
      // Undeclared exception!
      try { 
        checker0.finishLocalSetup();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.PackageNamesLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Checker checker0 = new Checker();
      try { 
        checker0.finishLocalSetup();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // if no custom moduleFactory is set, moduleClassLoader must be specified
         //
         verifyException("com.puppycrawl.tools.checkstyle.Checker", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Checker checker0 = new Checker();
      CheckerTest.DynamicalResourceHolderCheck checkerTest_DynamicalResourceHolderCheck0 = new CheckerTest.DynamicalResourceHolderCheck();
      checker0.addFileSetCheck(checkerTest_DynamicalResourceHolderCheck0);
      // Undeclared exception!
      try { 
        checker0.process((List<File>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.Checker", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Checker checker0 = new Checker();
      checker0.destroy();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Checker checker0 = new Checker();
      checker0.setLocaleLanguage("general.exception");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Checker checker0 = new Checker();
      checker0.setHaltOnException(false);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Checker checker0 = new Checker();
      ModuleFactory moduleFactory0 = mock(ModuleFactory.class, new ViolatedAssumptionAnswer());
      doReturn(checker0).when(moduleFactory0).createModule(anyString());
      checker0.setModuleFactory(moduleFactory0);
      checker0.finishLocalSetup();
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(configuration0).getName();
      try { 
        checker0.setupChild(configuration0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // cannot initialize module  - Cannot set property 'severity' to 'error'
         //
         verifyException("com.puppycrawl.tools.checkstyle.Checker", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Checker checker0 = new Checker();
      // Undeclared exception!
      try { 
        checker0.setCacheFile("r'5j'42Y=>sLWS(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // config can not be null
         //
         verifyException("com.puppycrawl.tools.checkstyle.PropertyCacheFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Checker checker0 = new Checker();
      ClassLoader classLoader0 = mock(ClassLoader.class, new ViolatedAssumptionAnswer());
      checker0.setClassLoader(classLoader0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Checker checker0 = new Checker();
      checker0.setLocaleCountry("general.exception");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Checker checker0 = new Checker();
      AuditListener auditListener0 = mock(AuditListener.class, new ViolatedAssumptionAnswer());
      checker0.removeListener(auditListener0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Checker checker0 = new Checker();
      BeforeExecutionFileFilter beforeExecutionFileFilter0 = mock(BeforeExecutionFileFilter.class, new ViolatedAssumptionAnswer());
      checker0.removeBeforeExecutionFileFilter(beforeExecutionFileFilter0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Checker checker0 = new Checker();
      checker0.setBasedir("4>N,%L({N");
      // Undeclared exception!
      try { 
        checker0.fireFileFinished("RegexpMultilineCheck");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Checker checker0 = new Checker();
      Filter filter0 = mock(Filter.class, new ViolatedAssumptionAnswer());
      checker0.removeFilter(filter0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Checker checker0 = new Checker();
      BeforeExecutionFileFilterSet beforeExecutionFileFilterSet0 = new BeforeExecutionFileFilterSet();
      checker0.addBeforeExecutionFileFilter(beforeExecutionFileFilterSet0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Checker checker0 = new Checker();
      checker0.setTabWidth(0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Checker checker0 = new Checker();
      Filter filter0 = mock(Filter.class, new ViolatedAssumptionAnswer());
      checker0.addFilter(filter0);
  }
}
