/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Wed Feb 26 15:59:34 GMT 2020
 */

package com.puppycrawl.tools.checkstyle;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class PropertyCacheFile_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  protected static ExecutorService executor; 

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.puppycrawl.tools.checkstyle.PropertyCacheFile"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    executor.shutdownNow(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "Cp1252"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "C:\\Users\\ronys\\AppData\\Local\\Temp\\"); 
    java.lang.System.setProperty("user.country", "BR"); 
    java.lang.System.setProperty("user.dir", "C:\\Users\\ronys\\git\\checkstyle"); 
    java.lang.System.setProperty("user.home", "C:\\Users\\ronys"); 
    java.lang.System.setProperty("user.language", "pt"); 
    java.lang.System.setProperty("user.name", "ronys"); 
    java.lang.System.setProperty("user.timezone", ""); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(PropertyCacheFile_ESTest_scaffolding.class.getClassLoader() ,
      "antlr.collections.AST",
      "com.puppycrawl.tools.checkstyle.api.Contextualizable",
      "com.puppycrawl.tools.checkstyle.utils.CommonUtil",
      "com.puppycrawl.tools.checkstyle.PropertyCacheFile$ExternalResource",
      "com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck",
      "com.puppycrawl.tools.checkstyle.api.Configurable",
      "com.puppycrawl.tools.checkstyle.api.ExternalResourceHolder",
      "com.puppycrawl.tools.checkstyle.ThreadModeSettings",
      "com.puppycrawl.tools.checkstyle.api.Configuration",
      "com.puppycrawl.tools.checkstyle.api.AutomaticBean",
      "com.puppycrawl.tools.checkstyle.api.AbstractViolationReporter",
      "com.puppycrawl.tools.checkstyle.api.FileSetCheck",
      "com.puppycrawl.tools.checkstyle.Checker",
      "com.puppycrawl.tools.checkstyle.DefaultConfiguration",
      "com.puppycrawl.tools.checkstyle.api.MessageDispatcher",
      "com.puppycrawl.tools.checkstyle.TreeWalker",
      "com.puppycrawl.tools.checkstyle.api.DetailAST",
      "com.puppycrawl.tools.checkstyle.api.RootModule",
      "com.puppycrawl.tools.checkstyle.PropertyCacheFile",
      "com.puppycrawl.tools.checkstyle.api.CheckstyleException"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("com.puppycrawl.tools.checkstyle.api.Configuration", false, PropertyCacheFile_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(PropertyCacheFile_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.puppycrawl.tools.checkstyle.PropertyCacheFile",
      "com.puppycrawl.tools.checkstyle.PropertyCacheFile$ExternalResource",
      "com.puppycrawl.tools.checkstyle.DefaultConfiguration",
      "com.puppycrawl.tools.checkstyle.ThreadModeSettings",
      "com.puppycrawl.tools.checkstyle.api.CheckstyleException",
      "net.sf.saxon.lib.Feature",
      "net.sf.saxon.Configuration",
      "net.sf.saxon.lib.StaticQueryContextFactory",
      "net.sf.saxon.lib.StandardCollationURIResolver",
      "net.sf.saxon.resource.StandardCollectionFinder",
      "net.sf.saxon.lib.StandardEnvironmentVariableResolver",
      "net.sf.saxon.lib.ParseOptions",
      "net.sf.saxon.expr.parser.OptimizerOptions",
      "net.sf.saxon.trans.CompilerInfo",
      "net.sf.saxon.lib.StandardOutputResolver",
      "net.sf.saxon.expr.instruct.GlobalParameterSet",
      "net.sf.saxon.trans.packages.PackageLibrary",
      "net.sf.saxon.tree.util.DocumentNumberAllocator",
      "net.sf.saxon.trans.DynamicLoader",
      "net.sf.saxon.z.IntHashSet",
      "net.sf.saxon.om.DocumentPool",
      "net.sf.saxon.functions.IntegratedFunctionLibrary",
      "net.sf.saxon.om.NamePool",
      "net.sf.saxon.lib.SerializerFactory",
      "net.sf.saxon.lib.Logger",
      "net.sf.saxon.lib.StandardLogger",
      "net.sf.saxon.java.JavaPlatform",
      "net.sf.saxon.Version",
      "net.sf.saxon.lib.StandardModuleURIResolver",
      "net.sf.saxon.lib.StandardURIResolver",
      "net.sf.saxon.lib.StandardUnparsedTextResolver",
      "net.sf.saxon.expr.parser.TypeChecker",
      "net.sf.saxon.expr.compat.TypeChecker10",
      "net.sf.saxon.tree.tiny.TreeStatistics",
      "net.sf.saxon.tree.tiny.Statistics",
      "net.sf.saxon.dom.DOMEnvelope",
      "net.sf.saxon.om.TreeModel$TinyTree",
      "net.sf.saxon.om.TreeModel$TinyTreeCondensed",
      "net.sf.saxon.om.TreeModel$LinkedTree",
      "net.sf.saxon.om.TreeModel",
      "net.sf.saxon.dom.DOMObjectModel",
      "net.sf.saxon.lib.StandardEntityResolver",
      "net.sf.saxon.resource.XmlResource$1",
      "net.sf.saxon.resource.XmlResource",
      "net.sf.saxon.resource.UnparsedTextResource$1",
      "net.sf.saxon.resource.UnparsedTextResource",
      "net.sf.saxon.resource.BinaryResource$1",
      "net.sf.saxon.resource.BinaryResource",
      "net.sf.saxon.resource.JSONResource$1",
      "net.sf.saxon.resource.JSONResource",
      "net.sf.saxon.lib.XQueryFunctionAnnotationHandler$DisallowedCombination",
      "net.sf.saxon.om.StructuredQName",
      "net.sf.saxon.query.Annotation",
      "net.sf.saxon.lib.XQueryFunctionAnnotationHandler",
      "net.sf.saxon.trans.ConfigurationReader",
      "net.sf.saxon.tree.util.FastStringBuffer",
      "net.sf.saxon.trans.XPathException",
      "net.sf.saxon.expr.instruct.Actor",
      "net.sf.saxon.expr.accum.Accumulator",
      "net.sf.saxon.trans.Mode",
      "net.sf.saxon.trans.SimpleMode",
      "net.sf.saxon.trans.rules.RuleChain",
      "net.sf.saxon.z.IntHashMap",
      "net.sf.saxon.trans.rules.TextOnlyCopyRuleSet",
      "net.sf.saxon.value.AtomicValue",
      "net.sf.saxon.value.NumericValue",
      "net.sf.saxon.type.AnySimpleType",
      "net.sf.saxon.pattern.NodeTest",
      "net.sf.saxon.pattern.AnyNodeTest",
      "net.sf.saxon.type.AnyItemType",
      "net.sf.saxon.type.Type",
      "net.sf.saxon.type.PrimitiveUType",
      "net.sf.saxon.type.UType",
      "net.sf.saxon.type.AnyType",
      "net.sf.saxon.type.Untyped",
      "net.sf.saxon.type.ErrorType",
      "net.sf.saxon.type.NumericType",
      "net.sf.saxon.type.BuiltInType",
      "net.sf.saxon.om.FingerprintedQName",
      "net.sf.saxon.om.StandardNames",
      "net.sf.saxon.type.Converter",
      "net.sf.saxon.type.StringConverter",
      "net.sf.saxon.type.StringConverter$StringToString",
      "net.sf.saxon.type.StringConverter$StringToLanguage",
      "net.sf.saxon.type.StringConverter$StringToNormalizedString",
      "net.sf.saxon.type.StringConverter$StringToToken",
      "net.sf.saxon.type.StringConverter$StringToNCName",
      "net.sf.saxon.type.StringConverter$StringToName",
      "net.sf.saxon.type.StringConverter$StringToNMTOKEN",
      "net.sf.saxon.type.StringConverter$StringToDecimal",
      "net.sf.saxon.type.StringConverter$StringToInteger",
      "net.sf.saxon.type.StringConverter$StringToDuration",
      "net.sf.saxon.type.StringConverter$StringToGMonth",
      "net.sf.saxon.type.StringConverter$StringToGMonthDay",
      "net.sf.saxon.type.StringConverter$StringToGDay",
      "net.sf.saxon.type.StringConverter$StringToDayTimeDuration",
      "net.sf.saxon.type.StringConverter$StringToYearMonthDuration",
      "net.sf.saxon.type.StringConverter$StringToTime",
      "net.sf.saxon.type.StringConverter$StringToBoolean",
      "net.sf.saxon.type.StringConverter$StringToHexBinary",
      "net.sf.saxon.type.StringConverter$StringToBase64Binary",
      "net.sf.saxon.type.StringConverter$StringToUntypedAtomic",
      "net.sf.saxon.type.StringConverter$StringToIntegerSubtype",
      "net.sf.saxon.type.BuiltInAtomicType",
      "net.sf.saxon.value.DoubleValue",
      "net.sf.saxon.value.DecimalValue",
      "net.sf.saxon.value.IntegerValue",
      "net.sf.saxon.value.BigIntegerValue",
      "net.sf.saxon.functions.AbstractFunction",
      "net.sf.saxon.functions.SystemFunction",
      "net.sf.saxon.functions.FormatNumber",
      "net.sf.saxon.value.BigDecimalValue",
      "net.sf.saxon.value.Int64Value",
      "net.sf.saxon.expr.Expression",
      "net.sf.saxon.expr.Literal",
      "net.sf.saxon.value.EmptySequence",
      "net.sf.saxon.expr.parser.ExplicitLocation",
      "net.sf.saxon.trans.SimpleMode$RuleSorter",
      "net.sf.saxon.expr.sort.GenericSorter",
      "net.sf.saxon.trans.rules.DeepSkipRuleSet",
      "net.sf.saxon.trans.CompoundMode",
      "net.sf.saxon.trans.SimpleMode$MaxPrecedenceAction",
      "net.sf.saxon.z.IntHashMap$IntHashMapKeyIterator",
      "com.puppycrawl.tools.checkstyle.utils.CommonUtil",
      "net.sf.saxon.sxpath.AbstractStaticContext",
      "net.sf.saxon.xpath.JAXPXPathStaticContext",
      "net.sf.saxon.functions.FunctionLibraryList",
      "net.sf.saxon.xpath.JAXPXPathStaticContext$MinimalNamespaceContext",
      "net.sf.saxon.query.StaticQueryContext",
      "net.sf.saxon.expr.Component",
      "net.sf.saxon.expr.Component$M",
      "net.sf.saxon.tree.linked.NodeImpl",
      "net.sf.saxon.tree.linked.ParentNodeImpl",
      "net.sf.saxon.tree.linked.ElementImpl",
      "net.sf.saxon.style.StyleElement",
      "net.sf.saxon.style.XSLGeneralVariable",
      "net.sf.saxon.style.XSLLocalVariable",
      "net.sf.saxon.style.SourceBinding",
      "net.sf.saxon.trace.ExpressionPresenter$ExportOptions",
      "net.sf.saxon.expr.instruct.Instruction",
      "net.sf.saxon.expr.OperandUsage",
      "net.sf.saxon.pattern.NodeKindTest",
      "net.sf.saxon.type.AnyFunctionType",
      "net.sf.saxon.value.Cardinality",
      "net.sf.saxon.value.SequenceType",
      "net.sf.saxon.expr.OperandRole",
      "net.sf.saxon.expr.sort.MergeInstr",
      "net.sf.saxon.expr.parser.RoleDiagnostic",
      "net.sf.saxon.expr.UnaryExpression",
      "net.sf.saxon.expr.Atomizer",
      "net.sf.saxon.expr.Operand",
      "net.sf.saxon.expr.parser.ExpressionTool",
      "net.sf.saxon.expr.AdjacentTextNodeMerger",
      "net.sf.saxon.lib.StandardErrorListener",
      "net.sf.saxon.query.QueryModule",
      "net.sf.saxon.expr.instruct.Executable",
      "net.sf.saxon.query.XQueryFunctionLibrary",
      "net.sf.saxon.functions.registry.BuiltInFunctionSet",
      "net.sf.saxon.functions.registry.BuiltInFunctionSet$Entry",
      "net.sf.saxon.value.BooleanValue",
      "net.sf.saxon.regex.UnicodeString",
      "net.sf.saxon.regex.EmptyString",
      "net.sf.saxon.regex.LatinString",
      "net.sf.saxon.value.StringValue",
      "net.sf.saxon.functions.registry.XPath20FunctionSet",
      "net.sf.saxon.functions.registry.XPath30FunctionSet",
      "net.sf.saxon.ma.map.MapType",
      "net.sf.saxon.type.SpecificFunctionType",
      "net.sf.saxon.query.AnnotationList",
      "net.sf.saxon.functions.OptionsParameter",
      "net.sf.saxon.ma.json.JsonToXMLFn",
      "net.sf.saxon.ma.json.ParseJsonFn",
      "net.sf.saxon.functions.Serialize",
      "net.sf.saxon.functions.TransformFn",
      "net.sf.saxon.ma.arrays.ArrayItemType",
      "net.sf.saxon.ma.json.XMLToJsonFn",
      "net.sf.saxon.functions.registry.XPath31FunctionSet",
      "net.sf.saxon.functions.Doc_2",
      "net.sf.saxon.functions.registry.VendorFunctionSetHE",
      "net.sf.saxon.functions.MathFunctionSet",
      "net.sf.saxon.ma.map.MapFunctionSet",
      "net.sf.saxon.ma.arrays.ArrayFunctionSet",
      "net.sf.saxon.functions.registry.ExsltCommonFunctionSet",
      "net.sf.saxon.functions.registry.ConstructorFunctionLibrary",
      "net.sf.saxon.query.ImportedFunctionLibrary",
      "net.sf.saxon.query.UnboundFunctionLibrary",
      "net.sf.saxon.expr.PackageData",
      "net.sf.saxon.expr.instruct.SlotManager",
      "net.sf.saxon.expr.instruct.LocalParam",
      "net.sf.saxon.type.Converter$UnfailingConverter",
      "net.sf.saxon.type.Converter$NumericToDouble",
      "net.sf.saxon.style.XSLGlobalVariable",
      "net.sf.saxon.style.XSLGlobalParam",
      "net.sf.saxon.om.ZeroOrOne",
      "net.sf.saxon.om.One",
      "net.sf.saxon.functions.ScalarSystemFunction",
      "net.sf.saxon.functions.Abs",
      "net.sf.saxon.style.XSLAccumulator",
      "net.sf.saxon.event.ContentHandlerProxy",
      "net.sf.saxon.trans.ConfigurationReader$1",
      "net.sf.saxon.tree.linked.DocumentImpl",
      "net.sf.saxon.tree.linked.SystemIdMap",
      "net.sf.saxon.om.NoElementsSpaceStrippingRule",
      "net.sf.saxon.style.XSLResultDocument",
      "net.sf.saxon.style.XSLTemplate",
      "net.sf.saxon.trans.Visibility",
      "net.sf.saxon.style.ExpressionContext",
      "net.sf.saxon.style.XSLAssert",
      "net.sf.saxon.style.Compilation",
      "net.sf.saxon.om.QNameParser",
      "net.sf.saxon.style.StylesheetModule",
      "net.sf.saxon.event.PipelineConfiguration",
      "net.sf.saxon.event.Builder",
      "net.sf.saxon.tree.linked.LinkedTreeBuilder",
      "net.sf.saxon.tree.linked.LinkedTreeBuilder$DefaultNodeFactory",
      "net.sf.saxon.style.StyleNodeFactory",
      "net.sf.saxon.event.SequenceReceiver",
      "net.sf.saxon.event.ProxyReceiver",
      "net.sf.saxon.style.UseWhenFilter",
      "net.sf.saxon.value.NestedIntegerValue",
      "net.sf.saxon.value.CalendarValue",
      "net.sf.saxon.value.DateTimeValue",
      "net.sf.saxon.event.StartTagBuffer",
      "net.sf.saxon.tree.util.AttributeCollectionImpl",
      "net.sf.saxon.om.StylesheetSpaceStrippingRule",
      "net.sf.saxon.event.Stripper$StripRuleTarget",
      "net.sf.saxon.event.Stripper$1",
      "net.sf.saxon.event.Stripper$2",
      "net.sf.saxon.event.Stripper",
      "net.sf.saxon.event.CommentStripper",
      "net.sf.saxon.tree.tiny.TinyBuilder",
      "net.sf.saxon.event.CheckSumFilter",
      "net.sf.saxon.event.Valve",
      "net.sf.saxon.event.Sender",
      "net.sf.saxon.tree.util.Navigator",
      "net.sf.saxon.style.StylesheetPackage",
      "net.sf.saxon.tree.linked.TextImpl",
      "net.sf.saxon.style.TextValueTemplateNode",
      "net.sf.saxon.style.TextValueTemplateContext",
      "net.sf.saxon.sxpath.IndependentContext",
      "net.sf.saxon.expr.instruct.ParentNodeConstructor",
      "net.sf.saxon.expr.instruct.ElementCreator",
      "net.sf.saxon.expr.instruct.Copy",
      "net.sf.saxon.style.XSLOverride",
      "net.sf.saxon.Controller",
      "net.sf.saxon.style.XSLSequence",
      "net.sf.saxon.style.XSLOnEmpty",
      "net.sf.saxon.om.NameChecker",
      "net.sf.saxon.serialize.charcode.UTF16CharacterSet",
      "net.sf.saxon.serialize.charcode.XMLCharacterData",
      "net.sf.saxon.style.XSLBreakOrContinue",
      "net.sf.saxon.style.XSLNextIteration",
      "net.sf.saxon.value.QualifiedNameValue",
      "net.sf.saxon.value.QNameValue",
      "net.sf.saxon.om.NamespaceBinding",
      "net.sf.saxon.expr.instruct.GlobalVariable",
      "net.sf.saxon.s9api.XsltExecutable",
      "net.sf.saxon.jaxp.TemplatesImpl",
      "net.sf.saxon.style.UseWhenStaticContext",
      "net.sf.saxon.style.XSLLeafNodeConstructor",
      "net.sf.saxon.style.XSLNamespace",
      "net.sf.saxon.tree.linked.TreeEnumeration",
      "net.sf.saxon.tree.linked.AncestorEnumeration",
      "net.sf.saxon.type.Converter$DateTimeToGMonthDay",
      "net.sf.saxon.expr.Calculator$AnyMinusAny",
      "net.sf.saxon.expr.Calculator$AnyTimesAny",
      "net.sf.saxon.expr.Calculator$AnyDivAny",
      "net.sf.saxon.expr.Calculator$AnyModAny",
      "net.sf.saxon.expr.Calculator$AnyIdivAny",
      "net.sf.saxon.expr.Calculator$DoublePlusDouble",
      "net.sf.saxon.expr.Calculator$DoubleMinusDouble",
      "net.sf.saxon.expr.Calculator$DoubleTimesDouble",
      "net.sf.saxon.expr.Calculator$DoubleDivDouble",
      "net.sf.saxon.expr.Calculator$DoubleModDouble",
      "net.sf.saxon.expr.Calculator$DoubleIdivDouble",
      "net.sf.saxon.expr.Calculator$FloatPlusFloat",
      "net.sf.saxon.expr.Calculator$FloatMinusFloat",
      "net.sf.saxon.expr.Calculator$FloatTimesFloat",
      "net.sf.saxon.expr.Calculator$FloatDivFloat",
      "net.sf.saxon.expr.Calculator$FloatModFloat",
      "net.sf.saxon.expr.Calculator$FloatIdivFloat",
      "net.sf.saxon.expr.Calculator$DecimalPlusDecimal",
      "net.sf.saxon.expr.Calculator$DecimalMinusDecimal",
      "net.sf.saxon.expr.Calculator$DecimalTimesDecimal",
      "net.sf.saxon.expr.Calculator$DecimalDivDecimal",
      "net.sf.saxon.expr.Calculator$DecimalModDecimal",
      "net.sf.saxon.expr.Calculator$DecimalIdivDecimal",
      "net.sf.saxon.expr.Calculator$IntegerPlusInteger",
      "net.sf.saxon.expr.Calculator$IntegerMinusInteger",
      "net.sf.saxon.expr.Calculator$IntegerTimesInteger",
      "net.sf.saxon.expr.Calculator$IntegerDivInteger",
      "net.sf.saxon.expr.Calculator$IntegerModInteger",
      "net.sf.saxon.expr.Calculator$IntegerIdivInteger",
      "net.sf.saxon.expr.Calculator$DateTimeMinusDateTime",
      "net.sf.saxon.expr.Calculator$DateTimePlusDuration",
      "net.sf.saxon.expr.Calculator$DateTimeMinusDuration",
      "net.sf.saxon.expr.Calculator$DurationPlusDateTime",
      "net.sf.saxon.expr.Calculator$DurationPlusDuration",
      "net.sf.saxon.expr.Calculator$DurationMinusDuration",
      "net.sf.saxon.expr.Calculator$DurationDivDuration",
      "net.sf.saxon.expr.Calculator$DurationTimesNumeric",
      "net.sf.saxon.expr.Calculator$DurationDivNumeric",
      "net.sf.saxon.expr.Calculator$NumericTimesDuration",
      "net.sf.saxon.expr.Calculator",
      "net.sf.saxon.expr.Calculator$AnyPlusAny",
      "net.sf.saxon.value.UntypedAtomicValue",
      "net.sf.saxon.expr.XPathContextMinor",
      "net.sf.saxon.expr.XPathContextMajor",
      "net.sf.saxon.expr.StackFrame",
      "net.sf.saxon.expr.accum.AccumulatorRegistry",
      "net.sf.saxon.xpath.XPathFunctionLibrary",
      "net.sf.saxon.style.XSLCopyOf",
      "net.sf.saxon.functions.registry.UseWhen30FunctionSet",
      "net.sf.saxon.style.XSLUsePackage"
    );
  }
}
