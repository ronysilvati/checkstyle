/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 26 15:49:16 GMT 2020
 */

package com.puppycrawl.tools.checkstyle.checks.whitespace;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ParenPadCheck_ESTest extends ParenPadCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParenPadCheck parenPadCheck0 = new ParenPadCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(23).when(detailAST0).getColumnNo();
      doReturn(1167).when(detailAST0).getLineNo();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(23).when(detailAST1).getType();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST2).findFirstToken(anyInt());
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(17, 0).when(detailAST3).getColumnNo();
      doReturn(1167).when(detailAST3).getLineNo();
      doReturn((DetailAST) null).when(detailAST3).getNextSibling();
      doReturn(detailAST1, detailAST2).when(detailAST3).getParent();
      doReturn(894, 77).when(detailAST3).getType();
      DetailAST detailAST4 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST3).when(detailAST4).getFirstChild();
      doReturn((DetailAST) null).when(detailAST4).getNextSibling();
      doReturn(894, 894, (-2912)).when(detailAST4).getType();
      DetailAST detailAST5 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST4).when(detailAST5).getNextSibling();
      doReturn(59, 59, 59).when(detailAST5).getType();
      DetailAST detailAST6 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST5).when(detailAST6).getFirstChild();
      doReturn(28).when(detailAST6).getType();
      parenPadCheck0.visitToken(detailAST6);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParenPadCheck parenPadCheck0 = new ParenPadCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(161).when(detailAST0).getType();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(1050).when(detailAST1).getColumnNo();
      doReturn(detailAST0).when(detailAST1).getParent();
      doReturn(894, 77).when(detailAST1).getType();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST1).when(detailAST2).getFirstChild();
      doReturn(2071, 2071, (-2878)).when(detailAST2).getType();
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST2).when(detailAST3).getNextSibling();
      doReturn(59, 59, 59).when(detailAST3).getType();
      DetailAST detailAST4 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST3).when(detailAST4).getFirstChild();
      doReturn(28).when(detailAST4).getType();
      // Undeclared exception!
      try { 
        parenPadCheck0.visitToken(detailAST4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParenPadCheck parenPadCheck0 = new ParenPadCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null).when(detailAST0).getNextSibling();
      doReturn(0, 0, 0).when(detailAST0).getType();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null, (DetailAST) null, (DetailAST) null).when(detailAST1).getFirstChild();
      doReturn((DetailAST) null, (DetailAST) null, (DetailAST) null).when(detailAST1).getNextSibling();
      doReturn(0, 0, 0, 0, 0).when(detailAST1).getType();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST2).getFirstChild();
      doReturn(detailAST1, detailAST1, detailAST1).when(detailAST2).getNextSibling();
      doReturn((-2448), (-2448), 18, (-2448), 8).when(detailAST2).getType();
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST2).when(detailAST3).getFirstChild();
      doReturn(detailAST2, detailAST2).when(detailAST3).getNextSibling();
      doReturn(0, 0, (-2035), (-2035), 91).when(detailAST3).getType();
      DetailAST detailAST4 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST3).when(detailAST4).getFirstChild();
      doReturn(detailAST3).when(detailAST4).getNextSibling();
      doReturn(0, 2407, 2407).when(detailAST4).getType();
      DetailAST detailAST5 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST4).when(detailAST5).getFirstChild();
      doReturn(109).when(detailAST5).getType();
      parenPadCheck0.visitToken(detailAST5);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParenPadCheck parenPadCheck0 = new ParenPadCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(76).when(detailAST0).getType();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      doReturn(0, 3937, 3937).when(detailAST1).getType();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST1).when(detailAST2).getFirstChild();
      doReturn(109).when(detailAST2).getType();
      // Undeclared exception!
      try { 
        parenPadCheck0.visitToken(detailAST2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParenPadCheck parenPadCheck0 = new ParenPadCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).findFirstToken(anyInt());
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).getParent();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST1).when(detailAST2).findFirstToken(anyInt());
      doReturn(91).when(detailAST2).getType();
      // Undeclared exception!
      try { 
        parenPadCheck0.visitToken(detailAST2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParenPadCheck parenPadCheck0 = new ParenPadCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(23).when(detailAST0).getColumnNo();
      doReturn(23).when(detailAST0).getLineNo();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(23).when(detailAST1).getType();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST2).findFirstToken(anyInt());
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(893, 77).when(detailAST3).getColumnNo();
      doReturn(23).when(detailAST3).getLineNo();
      doReturn(detailAST1, detailAST2).when(detailAST3).getParent();
      doReturn((-2112), 77).when(detailAST3).getType();
      DetailAST detailAST4 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST3).when(detailAST4).getFirstChild();
      doReturn((-2112), (-2112), (-2878)).when(detailAST4).getType();
      DetailAST detailAST5 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST4).when(detailAST5).getNextSibling();
      doReturn(59, 59, 59).when(detailAST5).getType();
      DetailAST detailAST6 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST5).when(detailAST6).getFirstChild();
      doReturn(28).when(detailAST6).getType();
      // Undeclared exception!
      try { 
        parenPadCheck0.visitToken(detailAST6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParenPadCheck parenPadCheck0 = new ParenPadCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getType();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST1).getColumnNo();
      doReturn((DetailAST) null).when(detailAST1).getNextSibling();
      doReturn(detailAST0).when(detailAST1).getParent();
      doReturn(894, 77).when(detailAST1).getType();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST1).when(detailAST2).getFirstChild();
      doReturn((DetailAST) null).when(detailAST2).getNextSibling();
      doReturn(2071, 2071, (-2878)).when(detailAST2).getType();
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST2).when(detailAST3).getNextSibling();
      doReturn(59, 59, 59).when(detailAST3).getType();
      DetailAST detailAST4 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST3).when(detailAST4).getFirstChild();
      doReturn(28).when(detailAST4).getType();
      parenPadCheck0.visitToken(detailAST4);
      assertFalse(parenPadCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParenPadCheck parenPadCheck0 = new ParenPadCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getColumnNo();
      doReturn(0).when(detailAST0).getLineNo();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(23).when(detailAST1).getType();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST2).findFirstToken(anyInt());
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST3).getColumnNo();
      doReturn((DetailAST) null).when(detailAST3).getFirstChild();
      doReturn(0).when(detailAST3).getLineNo();
      doReturn((DetailAST) null).when(detailAST3).getNextSibling();
      doReturn(detailAST1, detailAST2).when(detailAST3).getParent();
      doReturn(894, 77, 0).when(detailAST3).getType();
      DetailAST detailAST4 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST3).when(detailAST4).getFirstChild();
      doReturn((DetailAST) null).when(detailAST4).getNextSibling();
      doReturn(894, 894, (-2878)).when(detailAST4).getType();
      DetailAST detailAST5 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST4).when(detailAST5).getNextSibling();
      doReturn(59, 59, 59).when(detailAST5).getType();
      DetailAST detailAST6 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST5).when(detailAST6).getFirstChild();
      doReturn(28).when(detailAST6).getType();
      parenPadCheck0.visitToken(detailAST6);
      assertEquals(SeverityLevel.ERROR, parenPadCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParenPadCheck parenPadCheck0 = new ParenPadCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(23).when(detailAST0).getLineNo();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(23).when(detailAST1).getType();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST2).findFirstToken(anyInt());
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST3).getFirstChild();
      doReturn((DetailAST) null).when(detailAST3).getNextSibling();
      doReturn(0, 0, 0).when(detailAST3).getType();
      DetailAST detailAST4 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-3673)).when(detailAST4).getColumnNo();
      doReturn(930).when(detailAST4).getLineNo();
      doReturn(detailAST3).when(detailAST4).getNextSibling();
      doReturn(detailAST1, detailAST2).when(detailAST4).getParent();
      doReturn(894, 77).when(detailAST4).getType();
      DetailAST detailAST5 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST5).getFirstChild();
      doReturn((DetailAST) null).when(detailAST5).getNextSibling();
      doReturn(0, 0, 0).when(detailAST5).getType();
      DetailAST detailAST6 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST4).when(detailAST6).getFirstChild();
      doReturn(detailAST5).when(detailAST6).getNextSibling();
      doReturn(894, 894, (-2878)).when(detailAST6).getType();
      DetailAST detailAST7 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST6).when(detailAST7).getNextSibling();
      doReturn(59, 59, 59).when(detailAST7).getType();
      DetailAST detailAST8 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST7).when(detailAST8).getFirstChild();
      doReturn(28).when(detailAST8).getType();
      parenPadCheck0.visitToken(detailAST8);
      assertFalse(parenPadCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParenPadCheck parenPadCheck0 = new ParenPadCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).findFirstToken(anyInt());
      doReturn(181).when(detailAST0).getType();
      parenPadCheck0.visitToken(detailAST0);
      assertEquals(SeverityLevel.ERROR, parenPadCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParenPadCheck parenPadCheck0 = new ParenPadCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).findFirstToken(anyInt());
      doReturn(894).when(detailAST1).getType();
      // Undeclared exception!
      try { 
        parenPadCheck0.visitToken(detailAST1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParenPadCheck parenPadCheck0 = new ParenPadCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).findFirstToken(anyInt());
      doReturn(181).when(detailAST1).getType();
      // Undeclared exception!
      try { 
        parenPadCheck0.visitToken(detailAST1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParenPadCheck parenPadCheck0 = new ParenPadCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).findFirstToken(anyInt());
      doReturn(176).when(detailAST1).getType();
      // Undeclared exception!
      try { 
        parenPadCheck0.visitToken(detailAST1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParenPadCheck parenPadCheck0 = new ParenPadCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).findFirstToken(anyInt());
      doReturn(159).when(detailAST1).getType();
      // Undeclared exception!
      try { 
        parenPadCheck0.visitToken(detailAST1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParenPadCheck parenPadCheck0 = new ParenPadCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).findFirstToken(anyInt());
      doReturn(155).when(detailAST1).getType();
      // Undeclared exception!
      try { 
        parenPadCheck0.visitToken(detailAST1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ParenPadCheck parenPadCheck0 = new ParenPadCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).findFirstToken(anyInt());
      doReturn(136).when(detailAST1).getType();
      // Undeclared exception!
      try { 
        parenPadCheck0.visitToken(detailAST1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ParenPadCheck parenPadCheck0 = new ParenPadCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).findFirstToken(anyInt());
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST1).when(detailAST2).getParent();
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST2).when(detailAST3).findFirstToken(anyInt());
      doReturn(91).when(detailAST3).getType();
      // Undeclared exception!
      try { 
        parenPadCheck0.visitToken(detailAST3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ParenPadCheck parenPadCheck0 = new ParenPadCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).findFirstToken(anyInt());
      doReturn(67).when(detailAST1).getType();
      // Undeclared exception!
      try { 
        parenPadCheck0.visitToken(detailAST1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParenPadCheck parenPadCheck0 = new ParenPadCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(59).when(detailAST0).getType();
      parenPadCheck0.visitToken(detailAST0);
      assertNull(parenPadCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ParenPadCheck parenPadCheck0 = new ParenPadCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(27).when(detailAST0).getType();
      // Undeclared exception!
      try { 
        parenPadCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.AbstractCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ParenPadCheck parenPadCheck0 = new ParenPadCheck();
      int[] intArray0 = parenPadCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ParenPadCheck parenPadCheck0 = new ParenPadCheck();
      int[] intArray0 = parenPadCheck0.getAcceptableTokens();
      assertEquals(21, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ParenPadCheck parenPadCheck0 = new ParenPadCheck();
      int[] intArray0 = parenPadCheck0.getDefaultTokens();
      assertEquals(21, intArray0.length);
  }
}
