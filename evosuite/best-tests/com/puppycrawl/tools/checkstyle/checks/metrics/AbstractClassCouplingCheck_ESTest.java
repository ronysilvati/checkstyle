/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 26 16:04:05 GMT 2020
 */

package com.puppycrawl.tools.checkstyle.checks.metrics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.metrics.ClassDataAbstractionCouplingCheck;
import com.puppycrawl.tools.checkstyle.checks.metrics.ClassFanOutComplexityCheck;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractClassCouplingCheck_ESTest extends AbstractClassCouplingCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassDataAbstractionCouplingCheck classDataAbstractionCouplingCheck0 = new ClassDataAbstractionCouplingCheck();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "classDataAbstractionCoupling";
      stringArray0[1] = "classDataAbstractionCoupling";
      stringArray0[2] = "classDataAbstractionCoupling";
      stringArray0[3] = "classDataAbstractionCoupling";
      stringArray0[4] = "classDataAbstractionCoupling";
      stringArray0[5] = "classDataAbstractionCoupling";
      stringArray0[6] = "classDataAbstractionCoupling";
      classDataAbstractionCouplingCheck0.setExcludeClassesRegexps(stringArray0);
      assertEquals(SeverityLevel.ERROR, classDataAbstractionCouplingCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassFanOutComplexityCheck classFanOutComplexityCheck0 = new ClassFanOutComplexityCheck();
      // Undeclared exception!
      try { 
        classFanOutComplexityCheck0.setExcludedPackages((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassDataAbstractionCouplingCheck classDataAbstractionCouplingCheck0 = new ClassDataAbstractionCouplingCheck();
      // Undeclared exception!
      try { 
        classDataAbstractionCouplingCheck0.setExcludedClasses((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassFanOutComplexityCheck classFanOutComplexityCheck0 = new ClassFanOutComplexityCheck();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "classFanOutComplexity";
      stringArray0[1] = "";
      stringArray0[2] = "Convert String[";
      // Undeclared exception!
      try { 
        classFanOutComplexityCheck0.setExcludeClassesRegexps(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to initialise regular expression Convert String[
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.CommonUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassDataAbstractionCouplingCheck classDataAbstractionCouplingCheck0 = new ClassDataAbstractionCouplingCheck();
      // Undeclared exception!
      try { 
        classDataAbstractionCouplingCheck0.leaveToken((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.metrics.AbstractClassCouplingCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassDataAbstractionCouplingCheck classDataAbstractionCouplingCheck0 = new ClassDataAbstractionCouplingCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-913)).when(detailAST0).getType();
      classDataAbstractionCouplingCheck0.leaveToken(detailAST0);
      assertNull(classDataAbstractionCouplingCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassDataAbstractionCouplingCheck classDataAbstractionCouplingCheck0 = new ClassDataAbstractionCouplingCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(157).when(detailAST0).getType();
      // Undeclared exception!
      try { 
        classDataAbstractionCouplingCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassDataAbstractionCouplingCheck classDataAbstractionCouplingCheck0 = new ClassDataAbstractionCouplingCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(15).when(detailAST0).getType();
      // Undeclared exception!
      try { 
        classDataAbstractionCouplingCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassDataAbstractionCouplingCheck classDataAbstractionCouplingCheck0 = new ClassDataAbstractionCouplingCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(14).when(detailAST0).getType();
      // Undeclared exception!
      try { 
        classDataAbstractionCouplingCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassDataAbstractionCouplingCheck classDataAbstractionCouplingCheck0 = new ClassDataAbstractionCouplingCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(26).when(detailAST0).getType();
      doReturn("classFanOutComplexity").when(detailAST0).toString();
      // Undeclared exception!
      try { 
        classDataAbstractionCouplingCheck0.visitToken(detailAST0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown type: classFanOutComplexity
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.metrics.AbstractClassCouplingCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassDataAbstractionCouplingCheck classDataAbstractionCouplingCheck0 = new ClassDataAbstractionCouplingCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).findFirstToken(anyInt());
      doReturn(157).when(detailAST0).getType();
      // Undeclared exception!
      try { 
        classDataAbstractionCouplingCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.metrics.AbstractClassCouplingCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassDataAbstractionCouplingCheck classDataAbstractionCouplingCheck0 = new ClassDataAbstractionCouplingCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn("classFanOutComplexity").when(detailAST0).getText();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).findFirstToken(anyInt());
      doReturn(154).when(detailAST1).getType();
      classDataAbstractionCouplingCheck0.visitToken(detailAST1);
      assertEquals(SeverityLevel.ERROR, classDataAbstractionCouplingCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassDataAbstractionCouplingCheck classDataAbstractionCouplingCheck0 = new ClassDataAbstractionCouplingCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(19).when(detailAST0).getType();
      // Undeclared exception!
      try { 
        classDataAbstractionCouplingCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.metrics.AbstractClassCouplingCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassFanOutComplexityCheck classFanOutComplexityCheck0 = new ClassFanOutComplexityCheck();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "classFanOutComplexity";
      stringArray0[1] = "u";
      stringArray0[2] = "classFanOutComplexity";
      stringArray0[3] = "classFanOutComplexity";
      stringArray0[4] = "classFanOutComplexity";
      stringArray0[5] = "classFanOutComplexity";
      stringArray0[6] = "classFanOutComplexity";
      stringArray0[7] = "classFanOutComplexity";
      classFanOutComplexityCheck0.setExcludedPackages(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassDataAbstractionCouplingCheck classDataAbstractionCouplingCheck0 = new ClassDataAbstractionCouplingCheck();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Convert null value to type '";
      stringArray0[1] = "classDataAbstractionCoupling";
      stringArray0[2] = "classDataAbstractionCoupling";
      stringArray0[3] = "classDataAbstractionCoupling";
      stringArray0[4] = "classDataAbstractionCoupling";
      stringArray0[5] = "classDataAbstractionCoupling";
      stringArray0[6] = "classDataAbstractionCoupling";
      // Undeclared exception!
      try { 
        classDataAbstractionCouplingCheck0.setExcludedPackages(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the following values are not valid identifiers: [Convert null value to type ']
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.metrics.AbstractClassCouplingCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassFanOutComplexityCheck classFanOutComplexityCheck0 = new ClassFanOutComplexityCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      classFanOutComplexityCheck0.beginTree(detailAST0);
      assertNull(classFanOutComplexityCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassDataAbstractionCouplingCheck classDataAbstractionCouplingCheck0 = new ClassDataAbstractionCouplingCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(18).when(detailAST0).getType();
      // Undeclared exception!
      try { 
        classDataAbstractionCouplingCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.metrics.AbstractClassCouplingCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassDataAbstractionCouplingCheck classDataAbstractionCouplingCheck0 = new ClassDataAbstractionCouplingCheck();
      int[] intArray0 = classDataAbstractionCouplingCheck0.getDefaultTokens();
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassDataAbstractionCouplingCheck classDataAbstractionCouplingCheck0 = new ClassDataAbstractionCouplingCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(81).when(detailAST0).getType();
      // Undeclared exception!
      try { 
        classDataAbstractionCouplingCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.metrics.AbstractClassCouplingCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassDataAbstractionCouplingCheck classDataAbstractionCouplingCheck0 = new ClassDataAbstractionCouplingCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(154).when(detailAST0).getType();
      // Undeclared exception!
      try { 
        classDataAbstractionCouplingCheck0.leaveToken(detailAST0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassDataAbstractionCouplingCheck classDataAbstractionCouplingCheck0 = new ClassDataAbstractionCouplingCheck();
      String[] stringArray0 = new String[3];
      classDataAbstractionCouplingCheck0.setExcludedClasses(stringArray0);
      assertNull(classDataAbstractionCouplingCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassFanOutComplexityCheck classFanOutComplexityCheck0 = new ClassFanOutComplexityCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(detailAST0).getText();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).getNextSibling();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST1).when(detailAST2).getFirstChild();
      doReturn(159).when(detailAST2).getType();
      // Undeclared exception!
      try { 
        classFanOutComplexityCheck0.visitToken(detailAST2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.metrics.AbstractClassCouplingCheck$ClassContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassDataAbstractionCouplingCheck classDataAbstractionCouplingCheck0 = new ClassDataAbstractionCouplingCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getPreviousSibling();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).getLastChild();
      doReturn(16).when(detailAST1).getType();
      classDataAbstractionCouplingCheck0.visitToken(detailAST1);
      assertFalse(classDataAbstractionCouplingCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassDataAbstractionCouplingCheck classDataAbstractionCouplingCheck0 = new ClassDataAbstractionCouplingCheck();
      classDataAbstractionCouplingCheck0.setMax(0);
      assertEquals(SeverityLevel.ERROR, classDataAbstractionCouplingCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassFanOutComplexityCheck classFanOutComplexityCheck0 = new ClassFanOutComplexityCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn("classFanOutComplexity").when(detailAST0).getText();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).findFirstToken(anyInt());
      doReturn(15).when(detailAST1).getType();
      classFanOutComplexityCheck0.visitToken(detailAST1);
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(15).when(detailAST2).getType();
      classFanOutComplexityCheck0.leaveToken(detailAST2);
      assertNull(classFanOutComplexityCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassDataAbstractionCouplingCheck classDataAbstractionCouplingCheck0 = new ClassDataAbstractionCouplingCheck();
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        classDataAbstractionCouplingCheck0.setExcludeClassesRegexps(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
