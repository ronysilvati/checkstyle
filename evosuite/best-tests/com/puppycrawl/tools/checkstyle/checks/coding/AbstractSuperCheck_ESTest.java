/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 26 16:04:21 GMT 2020
 */

package com.puppycrawl.tools.checkstyle.checks.coding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
import com.puppycrawl.tools.checkstyle.checks.coding.SuperCloneCheck;
import com.puppycrawl.tools.checkstyle.checks.coding.SuperFinalizeCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractSuperCheck_ESTest extends AbstractSuperCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SuperCloneCheck superCloneCheck0 = new SuperCloneCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getParent();
      doReturn(79).when(detailAST0).getType();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).getParent();
      doReturn("clone").when(detailAST1).getText();
      doReturn(9).when(detailAST1).getType();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST2).getParent();
      doReturn((-642)).when(detailAST2).getType();
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST2).when(detailAST3).getParent();
      doReturn((-900)).when(detailAST3).getType();
      DetailAST detailAST4 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST4).findFirstToken(anyInt());
      doReturn(false).when(detailAST4).hasChildren();
      DetailAST detailAST5 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST1, detailAST4, (DetailAST) null).when(detailAST5).findFirstToken(anyInt());
      doReturn(detailAST1, detailAST3).when(detailAST5).getParent();
      doReturn(9).when(detailAST5).getType();
      superCloneCheck0.visitToken(detailAST5);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SuperCloneCheck superCloneCheck0 = new SuperCloneCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(1148, 0).when(detailAST0).getType();
      superCloneCheck0.visitToken(detailAST0);
      assertFalse(superCloneCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SuperCloneCheck superCloneCheck0 = new SuperCloneCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST4 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST4).findFirstToken(anyInt());
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST4).getParent();
      doReturn(9).when(detailAST4).getType();
      // Undeclared exception!
      try { 
        superCloneCheck0.visitToken(detailAST4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.AbstractSuperCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SuperFinalizeCheck superFinalizeCheck0 = new SuperFinalizeCheck();
      // Undeclared exception!
      try { 
        superFinalizeCheck0.leaveToken((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.AbstractSuperCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SuperCloneCheck superCloneCheck0 = new SuperCloneCheck();
      int[] intArray0 = superCloneCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {9, 79}, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SuperCloneCheck superCloneCheck0 = new SuperCloneCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getParent();
      doReturn(0).when(detailAST0).getType();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).getParent();
      doReturn(79).when(detailAST1).getType();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST1).when(detailAST2).getParent();
      doReturn("clone").when(detailAST2).getText();
      doReturn(9).when(detailAST2).getType();
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST3).getParent();
      doReturn(0).when(detailAST3).getType();
      DetailAST detailAST4 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST3).when(detailAST4).getParent();
      doReturn(79).when(detailAST4).getType();
      DetailAST detailAST5 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST4).when(detailAST5).getParent();
      doReturn((-900)).when(detailAST5).getType();
      DetailAST detailAST6 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST7 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST6).when(detailAST7).findFirstToken(anyInt());
      DetailAST detailAST8 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST2, detailAST7).when(detailAST8).findFirstToken(anyInt());
      doReturn(detailAST2, detailAST5).when(detailAST8).getParent();
      doReturn(9, 0).when(detailAST8).getType();
      superCloneCheck0.visitToken(detailAST8);
      assertFalse(superCloneCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SuperCloneCheck superCloneCheck0 = new SuperCloneCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).getParent();
      doReturn(15).when(detailAST1).getType();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST1).when(detailAST2).getParent();
      doReturn(0).when(detailAST2).getType();
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST4 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn("com.puppycrawl.tools.checkstyle.checks.coding.AbstractSuperCheck$MethodNode").when(detailAST4).getText();
      doReturn(1320).when(detailAST4).getType();
      DetailAST detailAST5 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST4).when(detailAST5).getNextSibling();
      doReturn(detailAST2, detailAST3).when(detailAST5).getParent();
      doReturn(9, 79).when(detailAST5).getType();
      superCloneCheck0.visitToken(detailAST5);
      assertNull(superCloneCheck0.getId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SuperFinalizeCheck superFinalizeCheck0 = new SuperFinalizeCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getType();
      superFinalizeCheck0.leaveToken(detailAST0);
      assertFalse(superFinalizeCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SuperCloneCheck superCloneCheck0 = new SuperCloneCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getParent();
      doReturn(0).when(detailAST0).getType();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).getParent();
      doReturn("missing.super.call").when(detailAST1).getText();
      doReturn(0).when(detailAST1).getType();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST2).getParent();
      doReturn(0).when(detailAST2).getType();
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST2).when(detailAST3).getParent();
      doReturn(0).when(detailAST3).getType();
      DetailAST detailAST4 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST5 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST1, detailAST4).when(detailAST5).findFirstToken(anyInt());
      doReturn((DetailAST) null).when(detailAST5).getNextSibling();
      doReturn(detailAST1, detailAST3, (DetailAST) null).when(detailAST5).getParent();
      doReturn(9, 79).when(detailAST5).getType();
      superCloneCheck0.visitToken(detailAST5);
      assertEquals(SeverityLevel.ERROR, superCloneCheck0.getSeverityLevel());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SuperCloneCheck superCloneCheck0 = new SuperCloneCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn("d0a3").when(detailAST1).getText();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST1).when(detailAST2).getNextSibling();
      doReturn(163).when(detailAST2).getType();
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST2).when(detailAST3).getNextSibling();
      doReturn(detailAST0).when(detailAST3).getParent();
      doReturn((-7), 79).when(detailAST3).getType();
      superCloneCheck0.visitToken(detailAST3);
      assertFalse(superCloneCheck0.isCommentNodesRequired());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SuperCloneCheck superCloneCheck0 = new SuperCloneCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getParent();
      doReturn(0).when(detailAST0).getType();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).getParent();
      doReturn(79).when(detailAST1).getType();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST1).when(detailAST2).getParent();
      doReturn(79).when(detailAST2).getType();
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST2).when(detailAST3).getParent();
      doReturn((-938)).when(detailAST3).getType();
      DetailAST detailAST4 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST3).when(detailAST4).getParent();
      doReturn("missing.super.call").when(detailAST4).getText();
      doReturn(0).when(detailAST4).getType();
      DetailAST detailAST5 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST5).getParent();
      doReturn((-979)).when(detailAST5).getType();
      DetailAST detailAST6 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST5).when(detailAST6).getParent();
      doReturn(372).when(detailAST6).getType();
      DetailAST detailAST7 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST6).when(detailAST7).getParent();
      doReturn(0).when(detailAST7).getType();
      DetailAST detailAST8 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST9 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST9).getNextSibling();
      doReturn("clone").when(detailAST9).getText();
      doReturn(156).when(detailAST9).getType();
      DetailAST detailAST10 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST4, detailAST8).when(detailAST10).findFirstToken(anyInt());
      doReturn(detailAST9).when(detailAST10).getNextSibling();
      doReturn(detailAST4, detailAST7, detailAST9).when(detailAST10).getParent();
      doReturn(9, 79).when(detailAST10).getType();
      // Undeclared exception!
      try { 
        superCloneCheck0.visitToken(detailAST10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.AbstractSuperCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SuperFinalizeCheck superFinalizeCheck0 = new SuperFinalizeCheck();
      int[] intArray0 = superFinalizeCheck0.getAcceptableTokens();
      assertArrayEquals(new int[] {9, 79}, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SuperFinalizeCheck superFinalizeCheck0 = new SuperFinalizeCheck();
      SuperCloneCheck superCloneCheck0 = new SuperCloneCheck();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST4 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST5 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST5).findFirstToken(anyInt());
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST5).getParent();
      doReturn(9).when(detailAST5).getType();
      superCloneCheck0.destroy();
      // Undeclared exception!
      try { 
        superCloneCheck0.visitToken(detailAST5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.coding.AbstractSuperCheck", e);
      }
  }
}
