/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 26 18:35:13 GMT 2020
 */

package com.puppycrawl.tools.checkstyle.checks.naming;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.DetailAstImpl;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifier;
import com.puppycrawl.tools.checkstyle.checks.naming.ParameterNameCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ParameterNameCheck_ESTest extends ParameterNameCheck_ESTest_scaffolding {

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: O teste em questão verifica se o método 
   * setAccessModifiers realmente gera uma exceção ao
   * receber como parâmetro um AccessModifier[] nulo, sendo que
   * dentro do método esse parâmetro não é tratado como nulo, ou
   * seja: Ao entrar no método, é chamado .length do atributo
   * gerando um NullPointerException quando o parâmetro é nulo.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ParameterNameCheck parameterNameCheck0 = new ParameterNameCheck();
      // Undeclared exception!
      try { 
        parameterNameCheck0.setAccessModifiers((AccessModifier[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.naming.ParameterNameCheck", e);
      }
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Não foi possível definir
   * ----------------------------------------------------------
   * DESCRIÇÃO: O teste em questão verifica se o método 
   * getRequiredTokens realmente retorna um array contendo o
   * valor 21, porém não foi possível definir a importância para
   * o contexto.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ParameterNameCheck parameterNameCheck0 = new ParameterNameCheck();
      int[] intArray0 = parameterNameCheck0.getRequiredTokens();
      assertArrayEquals(new int[] {21}, intArray0);
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Não foi possível definir
   * ----------------------------------------------------------
   * DESCRIÇÃO: O teste em questão verifica se o método 
   * mustCheckName realmente retorna uma exceção ao receber uma nova
   * instancia de DetailAstImpl, porém não foi possível definir o ponto
   * responsável por gerar a exceção nesses casos.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ParameterNameCheck parameterNameCheck0 = new ParameterNameCheck();
      DetailAstImpl detailAstImpl0 = new DetailAstImpl();
      // Undeclared exception!
      try { 
        parameterNameCheck0.mustCheckName(detailAstImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.naming.ParameterNameCheck", e);
      }
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: O teste em questão verifica se o método 
   * mustCheckName realmente gera uma exceção ao
   * receber como parâmetro um DetailAST nulo, sendo que
   * dentro do método esse parâmetro não é tratado como nulo, ou
   * seja: Ao entrar no método, é chamado .getParent() do atributo
   * gerando um NullPointerException quando o parâmetro é nulo.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ParameterNameCheck parameterNameCheck0 = new ParameterNameCheck();
      parameterNameCheck0.setIgnoreOverridden(true);
      // Undeclared exception!
      try { 
        parameterNameCheck0.mustCheckName((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.naming.ParameterNameCheck", e);
      }
  }

}
