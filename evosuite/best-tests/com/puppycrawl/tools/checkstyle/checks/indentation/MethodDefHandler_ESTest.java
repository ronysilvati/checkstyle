/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 26 16:42:02 GMT 2020
 */

package com.puppycrawl.tools.checkstyle.checks.indentation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel;
import com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck;
import com.puppycrawl.tools.checkstyle.checks.indentation.LineWrappingHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.MethodDefHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodDefHandler_ESTest extends MethodDefHandler_ESTest_scaffolding {

  /**
   * COMPREENSÍVEL: Não
   * DE FÁCIL CRIAÇÃO: Não
   * IMPORTANTE PARA O CONTEXTO: Não foi possível determinar
   * ----------------------------------------------------------
   * DESCRIÇÃO: Devido a complexidade de preparação do 
   * teste não foi possível compreender seu funcionamento e
   * sua importância no contexto geral.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn("<`<'#PqyNmGD", "<`<'#PqyNmGD").when(indentationCheck0).getLine(anyInt());
      doReturn((-374), 2304).when(indentationCheck0).getIndentationTabWidth();
      doReturn(0).when(indentationCheck0).getThrowsIndent();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null, (DetailAST) null, (DetailAST) null, (DetailAST) null, (DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null, (DetailAST) null, (DetailAST) null, (DetailAST) null, (DetailAST) null).when(detailAST0).getNextSibling();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-2822), 28).when(detailAST2).getColumnNo();
      doReturn(detailAST1, detailAST1).when(detailAST2).getFirstChild();
      doReturn(detailAST1, detailAST1).when(detailAST2).getNextSibling();
      DetailAST detailAST3 = AbstractExpressionHandler.getFirstToken(detailAST2);
      DetailAST detailAST4 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(detailAST4).getColumnNo();
      doReturn(detailAST3).when(detailAST4).getFirstChild();
      DetailAST detailAST5 = AbstractExpressionHandler.getFirstToken(detailAST4);
      DetailAST detailAST6 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(1, 0, 2013).when(detailAST6).getColumnNo();
      doReturn(detailAST5, detailAST5).when(detailAST6).getFirstChild();
      doReturn(detailAST5, detailAST5).when(detailAST6).getNextSibling();
      DetailAST detailAST7 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0, 445, 1).when(detailAST7).getColumnNo();
      doReturn(detailAST6).when(detailAST7).getFirstChild();
      doReturn(445, 445).when(detailAST7).getLineNo();
      doReturn(detailAST6).when(detailAST7).getNextSibling();
      DetailAST detailAST8 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST7, detailAST3, (DetailAST) null).when(detailAST8).findFirstToken(anyInt());
      doReturn(0, (-1924), (-1205)).when(detailAST8).getColumnNo();
      doReturn(detailAST7).when(detailAST8).getFirstChild();
      doReturn((-2723), (-2723)).when(detailAST8).getType();
      DetailAST detailAST9 = AbstractExpressionHandler.getFirstToken(detailAST8);
      AbstractExpressionHandler abstractExpressionHandler0 = mock(AbstractExpressionHandler.class, new ViolatedAssumptionAnswer());
      MethodDefHandler methodDefHandler0 = new MethodDefHandler(indentationCheck0, detailAST9, abstractExpressionHandler0);
      // Undeclared exception!
      try { 
        methodDefHandler0.checkIndentation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.MethodDefHandler", e);
      }
  }

  /**
   * COMPREENSÍVEL: Não
   * DE FÁCIL CRIAÇÃO: Não
   * IMPORTANTE PARA O CONTEXTO: Não foi possível determinar
   * ----------------------------------------------------------
   * DESCRIÇÃO: Devido a complexidade de preparação do 
   * teste não foi possível compreender seu funcionamento e
   * sua importância no contexto geral.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null, (DetailAST) null, (DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getNextSibling();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0, 445, 1).when(detailAST2).getColumnNo();
      doReturn(detailAST1).when(detailAST2).getFirstChild();
      doReturn(445, 445).when(detailAST2).getLineNo();
      doReturn(detailAST1).when(detailAST2).getNextSibling();
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST2).when(detailAST3).findFirstToken(anyInt());
      doReturn(0, (-1924)).when(detailAST3).getColumnNo();
      doReturn(detailAST2).when(detailAST3).getFirstChild();
      doReturn((-2723), (-2723)).when(detailAST3).getType();
      DetailAST detailAST4 = AbstractExpressionHandler.getFirstToken(detailAST3);
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn("ctor def", "indentation.error").when(indentationCheck0).getLine(anyInt());
      doReturn(757, 107).when(indentationCheck0).getIndentationTabWidth();
      MethodDefHandler methodDefHandler0 = new MethodDefHandler(indentationCheck0, detailAST4, (AbstractExpressionHandler) null);
      methodDefHandler0.checkModifiers();
  }

  /**
   * COMPREENSÍVEL: Não
   * DE FÁCIL CRIAÇÃO: Não
   * IMPORTANTE PARA O CONTEXTO: Não foi possível determinar
   * ----------------------------------------------------------
   * DESCRIÇÃO: Devido a complexidade de preparação do 
   * teste não foi possível compreender seu funcionamento e
   * sua importância no contexto geral.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn(")C;aNykUU#b|", (String) null, (String) null).when(indentationCheck0).getLine(anyInt());
      doReturn(0, 0, 0).when(indentationCheck0).getIndentationTabWidth();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getNextSibling();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(1184, 0, 0).when(detailAST1).getColumnNo();
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      doReturn(1184, 0, 0).when(detailAST1).getLineNo();
      doReturn(detailAST0).when(detailAST1).getNextSibling();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST1).when(detailAST2).findFirstToken(anyInt());
      doReturn((-2095), 0).when(detailAST2).getColumnNo();
      doReturn(detailAST1).when(detailAST2).getFirstChild();
      doReturn(250, 250).when(detailAST2).getType();
      DetailAST detailAST3 = AbstractExpressionHandler.getFirstToken(detailAST2);
      AbstractExpressionHandler abstractExpressionHandler0 = mock(AbstractExpressionHandler.class, new ViolatedAssumptionAnswer());
      doReturn((IndentLevel) null).when(abstractExpressionHandler0).getSuggestedChildIndent(any(com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.class));
      MethodDefHandler methodDefHandler0 = new MethodDefHandler(indentationCheck0, detailAST3, abstractExpressionHandler0);
      // Undeclared exception!
      try { 
        methodDefHandler0.checkIndentation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.MethodDefHandler", e);
      }
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: O teste em questão verifica se a instancia
   * acceptJsonFormatVisitor realmente gera uma exceção ao
   * receber como parâmetro um JsonFormatVisitorWrapper, sendo que
   * dentro do método esse parâmetro não é tratado como nulo, ou
   * seja: Ao entrar no método, um método do parâmetro é chamado,
   * gerando um NullPointerException quando o parâmetro é nulo.
   * ----------------------------------------------------------
  */

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null).when(detailAST0).getNextSibling();
      doReturn(0, 0).when(detailAST0).getType();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-1864)).when(detailAST2).getColumnNo();
      doReturn(detailAST1).when(detailAST2).getFirstChild();
      doReturn(161, 161).when(detailAST2).getType();
      DetailAST detailAST3 = AbstractExpressionHandler.getFirstToken(detailAST2);
      IndentationCheck indentationCheck1 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      AbstractExpressionHandler abstractExpressionHandler0 = mock(AbstractExpressionHandler.class, new ViolatedAssumptionAnswer());
      MethodDefHandler methodDefHandler0 = new MethodDefHandler(indentationCheck1, detailAST1, abstractExpressionHandler0);
      MethodDefHandler methodDefHandler1 = new MethodDefHandler(indentationCheck0, detailAST3, methodDefHandler0);
      assertFalse(methodDefHandler1.equals((Object)methodDefHandler0));
  }

  /**
   * COMPREENSÍVEL: Não
   * DE FÁCIL CRIAÇÃO: Não
   * IMPORTANTE PARA O CONTEXTO: Não foi possível determinar
   * ----------------------------------------------------------
   * DESCRIÇÃO: Devido a complexidade de preparação do 
   * teste não foi possível compreender seu funcionamento e
   * sua importância no contexto geral.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null).when(detailAST0).getNextSibling();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST2).getColumnNo();
      doReturn(detailAST1).when(detailAST2).getFirstChild();
      doReturn(8).when(detailAST2).getType();
      DetailAST detailAST3 = AbstractExpressionHandler.getFirstToken(detailAST2);
      AbstractExpressionHandler abstractExpressionHandler0 = mock(AbstractExpressionHandler.class, new ViolatedAssumptionAnswer());
      MethodDefHandler methodDefHandler0 = new MethodDefHandler((IndentationCheck) null, detailAST3, abstractExpressionHandler0);
  }

  /**
   * COMPREENSÍVEL: Não
   * DE FÁCIL CRIAÇÃO: Não
   * IMPORTANTE PARA O CONTEXTO: Não foi possível determinar
   * ----------------------------------------------------------
   * DESCRIÇÃO: Devido a complexidade de preparação do 
   * teste não foi possível compreender seu funcionamento.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn("<`<'#PqyNmGD", "<`<'#PqyNmGD", "<`<'#PqyNmGD", "<`<'#PqyNmGD", "<`<'#PqyNmGD").when(indentationCheck0).getLine(anyInt());
      doReturn((-374), 2304, (-2822), 46, (-374)).when(indentationCheck0).getIndentationTabWidth();
      doReturn((LineWrappingHandler) null).when(indentationCheck0).getLineWrappingHandler();
      doReturn(46).when(indentationCheck0).getThrowsIndent();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null, (DetailAST) null, (DetailAST) null, (DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(0, 0).when(detailAST0).getLineNo();
      doReturn((DetailAST) null, (DetailAST) null, (DetailAST) null, (DetailAST) null).when(detailAST0).getNextSibling();
      doReturn(0).when(detailAST0).getType();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-2822), (-1126)).when(detailAST2).getColumnNo();
      doReturn(detailAST1, detailAST1).when(detailAST2).getFirstChild();
      doReturn(1, 116, 0).when(detailAST2).getLineNo();
      doReturn(detailAST1).when(detailAST2).getNextSibling();
      DetailAST detailAST3 = AbstractExpressionHandler.getFirstToken(detailAST2);
      DetailAST detailAST4 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0, 445, 1).when(detailAST4).getColumnNo();
      doReturn(detailAST1).when(detailAST4).getFirstChild();
      doReturn(445, 445).when(detailAST4).getLineNo();
      doReturn(detailAST1).when(detailAST4).getNextSibling();
      DetailAST detailAST5 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST4, detailAST3, detailAST3, (DetailAST) null, detailAST3).when(detailAST5).findFirstToken(anyInt());
      doReturn(0, (-1924)).when(detailAST5).getColumnNo();
      doReturn(detailAST4).when(detailAST5).getFirstChild();
      doReturn((-2723), (-2723)).when(detailAST5).getType();
      DetailAST detailAST6 = AbstractExpressionHandler.getFirstToken(detailAST5);
      AbstractExpressionHandler abstractExpressionHandler0 = mock(AbstractExpressionHandler.class, new ViolatedAssumptionAnswer());
      MethodDefHandler methodDefHandler0 = new MethodDefHandler(indentationCheck0, detailAST6, abstractExpressionHandler0);
      // Undeclared exception!
      try { 
        methodDefHandler0.checkIndentation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }
}
