/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 26 15:30:28 GMT 2020
 */

package com.puppycrawl.tools.checkstyle.checks.indentation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.ArrayInitHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.CaseHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.CatchHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.ClassDefHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.DoWhileHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.ElseHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.ForHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory;
import com.puppycrawl.tools.checkstyle.checks.indentation.IfHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.ImportHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel;
import com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck;
import com.puppycrawl.tools.checkstyle.checks.indentation.IndexHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.LabelHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.LambdaHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.LineSet;
import com.puppycrawl.tools.checkstyle.checks.indentation.LineWrappingHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.MemberDefHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.MethodDefHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.NewHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.ObjectBlockHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.PackageDefHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.PrimordialHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.SlistHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.SwitchHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.TryHandler;
import com.puppycrawl.tools.checkstyle.checks.indentation.WhileHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractExpressionHandler_ESTest extends AbstractExpressionHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn("SsjGAh+r+H18HI}]{", "rparen").when(indentationCheck0).getLine(anyInt());
      doReturn((-168), (-168)).when(indentationCheck0).getIndentationTabWidth();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getNextSibling();
      doReturn((String) null, (String) null, (String) null).when(detailAST0).toString();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(2278).when(detailAST1).getColumnNo();
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      DetailAST detailAST2 = AbstractExpressionHandler.getFirstToken(detailAST1);
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-168), (-168), 5).when(detailAST3).getColumnNo();
      doReturn(detailAST2).when(detailAST3).getFirstChild();
      doReturn((-1542), (-1542)).when(detailAST3).getLineNo();
      doReturn("$\"+P7g=ce!Q").when(detailAST3).toString();
      DetailAST detailAST4 = AbstractExpressionHandler.getFirstToken(detailAST3);
      primordialHandler0.checkRightParen(detailAST4, detailAST4);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", "com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler").when(indentationCheck0).getLine(anyInt());
      doReturn(1013, 1013).when(indentationCheck0).getIndentationTabWidth();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(0).when(detailAST0).getLineNo();
      doReturn((DetailAST) null).when(detailAST0).getNextSibling();
      doReturn((String) null, (String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-280), 5).when(detailAST2).getColumnNo();
      doReturn(detailAST1).when(detailAST2).getFirstChild();
      doReturn(3).when(detailAST2).getLineNo();
      doReturn((-280), (-280)).when(detailAST2).getType();
      doReturn("indentation.child.error").when(detailAST2).toString();
      DetailAST detailAST3 = AbstractExpressionHandler.getFirstToken(detailAST2);
      PackageDefHandler packageDefHandler0 = new PackageDefHandler(indentationCheck0, detailAST3, (AbstractExpressionHandler) null);
      MethodDefHandler methodDefHandler0 = new MethodDefHandler(indentationCheck0, detailAST3, packageDefHandler0);
      // Undeclared exception!
      try { 
        methodDefHandler0.checkRightParen(detailAST1, detailAST3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(0, 0).when(detailAST0).getType();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      IndentationCheck indentationCheck1 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck1);
      DoWhileHandler doWhileHandler0 = new DoWhileHandler(indentationCheck1, detailAST1, primordialHandler0);
      TryHandler tryHandler0 = new TryHandler(indentationCheck0, detailAST1, doWhileHandler0);
      MethodDefHandler methodDefHandler0 = new MethodDefHandler(indentationCheck0, detailAST1, tryHandler0);
      ForHandler forHandler0 = new ForHandler(indentationCheck0, detailAST1, methodDefHandler0);
      forHandler0.checkRightParen(detailAST1, (DetailAST) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HandlerFactory handlerFactory0 = mock(HandlerFactory.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(handlerFactory0).isHandledType(anyInt());
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn("_ wWmN4i^-% S").when(indentationCheck0).getLine(anyInt());
      doReturn(handlerFactory0).when(indentationCheck0).getHandlerFactory();
      doReturn(Integer.MAX_VALUE).when(indentationCheck0).getIndentationTabWidth();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(0, 0).when(detailAST0).getLineNo();
      doReturn(0, 0, 0, 0).when(detailAST0).getType();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      BlockParentHandler blockParentHandler0 = new BlockParentHandler(indentationCheck0, "indentation.error", detailAST1, (AbstractExpressionHandler) null);
      ClassDefHandler classDefHandler0 = new ClassDefHandler(indentationCheck0, detailAST1, blockParentHandler0);
      NewHandler newHandler0 = new NewHandler(indentationCheck0, detailAST1, classDefHandler0);
      SwitchHandler switchHandler0 = new SwitchHandler(indentationCheck0, detailAST1, newHandler0);
      Integer integer0 = new Integer((-915));
      LineSet lineSet0 = mock(LineSet.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(lineSet0).getStartColumn(anyInt());
      switchHandler0.findSubtreeLines(lineSet0, detailAST1, false);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getNextSibling();
      doReturn((String) null, (String) null).when(detailAST0).toString();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-3937), 0).when(detailAST1).getColumnNo();
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      doReturn(detailAST0).when(detailAST1).getNextSibling();
      doReturn("modifier").when(detailAST1).toString();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-2593), 0).when(detailAST2).getColumnNo();
      doReturn(detailAST1, (DetailAST) null).when(detailAST2).getFirstChild();
      doReturn(0).when(detailAST2).getLineNo();
      doReturn((String) null).when(detailAST2).toString();
      DetailAST detailAST3 = AbstractExpressionHandler.getFirstToken(detailAST2);
      AbstractExpressionHandler.getFirstLine(14, detailAST3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn((LineWrappingHandler) null).when(indentationCheck0).getLineWrappingHandler();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      NewHandler newHandler0 = new NewHandler(indentationCheck0, detailAST1, (AbstractExpressionHandler) null);
      ForHandler forHandler0 = new ForHandler(indentationCheck0, detailAST1, newHandler0);
      PackageDefHandler packageDefHandler0 = new PackageDefHandler(indentationCheck0, detailAST1, forHandler0);
      ObjectBlockHandler objectBlockHandler0 = new ObjectBlockHandler(indentationCheck0, detailAST1, packageDefHandler0);
      // Undeclared exception!
      try { 
        objectBlockHandler0.checkWrappingIndentation((DetailAST) null, detailAST1, 0, 0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(indentationCheck0).getBasicOffset();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).findFirstToken(anyInt());
      doReturn(0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(0).when(detailAST0).getLineNo();
      doReturn((String) null, (String) null, (String) null, (String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      PackageDefHandler packageDefHandler0 = new PackageDefHandler(indentationCheck0, detailAST1, primordialHandler0);
      IndentationCheck indentationCheck1 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(indentationCheck1).getLine(anyInt());
      doReturn(0).when(indentationCheck1).getIndentationTabWidth();
      doReturn((LineWrappingHandler) null).when(indentationCheck1).getLineWrappingHandler();
      ImportHandler importHandler0 = new ImportHandler(indentationCheck1, detailAST1, packageDefHandler0);
      // Undeclared exception!
      try { 
        importHandler0.checkIndentation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null).when(detailAST0).getNextSibling();
      doReturn(0).when(detailAST0).getType();
      doReturn((String) null, (String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST2).getColumnNo();
      doReturn(detailAST1).when(detailAST2).getFirstChild();
      doReturn(0).when(detailAST2).getLineNo();
      doReturn(detailAST1).when(detailAST2).getParent();
      doReturn(14).when(detailAST2).getType();
      doReturn("indentation.error", "'0c!_").when(detailAST2).toString();
      DetailAST detailAST3 = AbstractExpressionHandler.getFirstToken(detailAST2);
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      ClassDefHandler classDefHandler0 = new ClassDefHandler(indentationCheck0, detailAST3, primordialHandler0);
      CatchHandler catchHandler0 = new CatchHandler(indentationCheck0, detailAST3, classDefHandler0);
      IndentationCheck indentationCheck1 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(indentationCheck1).getBasicOffset();
      IfHandler ifHandler0 = new IfHandler(indentationCheck1, detailAST3, primordialHandler0);
      IndentLevel indentLevel0 = ifHandler0.getSuggestedChildIndent(catchHandler0);
      catchHandler0.logError(detailAST3, "indentation.error.multi", 2514, indentLevel0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LineWrappingHandler lineWrappingHandler0 = mock(LineWrappingHandler.class, new ViolatedAssumptionAnswer());
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn(lineWrappingHandler0).when(indentationCheck0).getLineWrappingHandler();
      DoWhileHandler doWhileHandler0 = new DoWhileHandler(indentationCheck0, (DetailAST) null, (AbstractExpressionHandler) null);
      doWhileHandler0.checkWrappingIndentation((DetailAST) null, (DetailAST) null, 62, 12, true);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null).when(detailAST0).getNextSibling();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST1).getColumnNo();
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      doReturn("indentation.child.error.multi").when(detailAST1).toString();
      DetailAST detailAST2 = AbstractExpressionHandler.getFirstToken(detailAST1);
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      SlistHandler slistHandler0 = new SlistHandler(indentationCheck0, detailAST2, primordialHandler0);
      ArrayInitHandler arrayInitHandler0 = new ArrayInitHandler(indentationCheck0, detailAST2, slistHandler0);
      primordialHandler0.getSuggestedChildIndent(arrayInitHandler0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null).when(detailAST0).getNextSibling();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST1).getColumnNo();
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      doReturn("u-2%4Uh LhA]r").when(detailAST1).toString();
      DetailAST detailAST2 = AbstractExpressionHandler.getFirstToken(detailAST1);
      PackageDefHandler packageDefHandler0 = new PackageDefHandler(indentationCheck0, detailAST2, (AbstractExpressionHandler) null);
      packageDefHandler0.getParent();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      ArrayInitHandler arrayInitHandler0 = new ArrayInitHandler(indentationCheck0, detailAST1, (AbstractExpressionHandler) null);
      MemberDefHandler memberDefHandler0 = new MemberDefHandler(indentationCheck0, detailAST1, arrayInitHandler0);
      DoWhileHandler doWhileHandler0 = new DoWhileHandler(indentationCheck0, detailAST1, memberDefHandler0);
      doWhileHandler0.getParent();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DoWhileHandler doWhileHandler0 = new DoWhileHandler(indentationCheck0, (DetailAST) null, (AbstractExpressionHandler) null);
      doWhileHandler0.getMainAst();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn("indentation.error").when(indentationCheck0).getLine(anyInt());
      doReturn(0).when(indentationCheck0).getIndentationTabWidth();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null).when(detailAST0).getNextSibling();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST1).getColumnNo();
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      doReturn(12).when(detailAST1).getLineNo();
      doReturn("indentation.child.error").when(detailAST1).toString();
      DetailAST detailAST2 = AbstractExpressionHandler.getFirstToken(detailAST1);
      SwitchHandler switchHandler0 = new SwitchHandler(indentationCheck0, detailAST2, (AbstractExpressionHandler) null);
      switchHandler0.getLineStart(detailAST2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn("r?wi8A2lQ>@6w").when(indentationCheck0).getLine(anyInt());
      doReturn(0).when(indentationCheck0).getIndentationTabWidth();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      LabelHandler labelHandler0 = new LabelHandler(indentationCheck0, detailAST1, (AbstractExpressionHandler) null);
      labelHandler0.getLineStart(758);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(indentationCheck0).getBasicOffset();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(0, 0).when(detailAST0).getType();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      LabelHandler labelHandler0 = new LabelHandler(indentationCheck0, detailAST1, primordialHandler0);
      ElseHandler elseHandler0 = new ElseHandler(indentationCheck0, detailAST1, labelHandler0);
      MethodDefHandler methodDefHandler0 = new MethodDefHandler(indentationCheck0, detailAST1, elseHandler0);
      methodDefHandler0.getIndentImpl();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      IndentationCheck indentationCheck1 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      LambdaHandler lambdaHandler0 = new LambdaHandler(indentationCheck0, detailAST1, primordialHandler0);
      ForHandler forHandler0 = new ForHandler(indentationCheck1, detailAST1, lambdaHandler0);
      SwitchHandler switchHandler0 = new SwitchHandler(indentationCheck0, detailAST1, forHandler0);
      PackageDefHandler packageDefHandler0 = new PackageDefHandler((IndentationCheck) null, detailAST1, switchHandler0);
      packageDefHandler0.getIndentCheck();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(indentationCheck0).getBasicOffset();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getNextSibling();
      doReturn(0, 0, 0).when(detailAST0).getType();
      doReturn((String) null, (String) null, (String) null).when(detailAST0).toString();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-697), 0).when(detailAST1).getColumnNo();
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      doReturn(detailAST0).when(detailAST1).getNextSibling();
      doReturn("").when(detailAST1).toString();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-2745), 1689).when(detailAST2).getColumnNo();
      doReturn(detailAST1).when(detailAST2).getFirstChild();
      DetailAST detailAST3 = AbstractExpressionHandler.getFirstToken(detailAST2);
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      ClassDefHandler classDefHandler0 = new ClassDefHandler(indentationCheck0, detailAST3, primordialHandler0);
      PackageDefHandler packageDefHandler0 = new PackageDefHandler(indentationCheck0, detailAST3, classDefHandler0);
      packageDefHandler0.getIndent();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(indentationCheck0).getBraceAdjustment();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      primordialHandler0.getBraceAdjustment();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn(16).when(indentationCheck0).getBraceAdjustment();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      PackageDefHandler packageDefHandler0 = new PackageDefHandler(indentationCheck0, detailAST1, (AbstractExpressionHandler) null);
      CaseHandler caseHandler0 = new CaseHandler(indentationCheck0, detailAST1, packageDefHandler0);
      caseHandler0.getBraceAdjustment();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(indentationCheck0).getBasicOffset();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      IndentationCheck indentationCheck1 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      WhileHandler whileHandler0 = new WhileHandler(indentationCheck1, detailAST1, (AbstractExpressionHandler) null);
      SlistHandler slistHandler0 = new SlistHandler(indentationCheck0, detailAST1, whileHandler0);
      IfHandler ifHandler0 = new IfHandler(indentationCheck1, detailAST1, slistHandler0);
      PackageDefHandler packageDefHandler0 = new PackageDefHandler(indentationCheck0, detailAST1, ifHandler0);
      ArrayInitHandler arrayInitHandler0 = new ArrayInitHandler(indentationCheck0, detailAST1, packageDefHandler0);
      arrayInitHandler0.getBasicOffset();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn("").when(indentationCheck0).getLine(anyInt());
      doReturn((-4847)).when(indentationCheck0).getIndentationTabWidth();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null).when(detailAST0).getNextSibling();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-2745), 0).when(detailAST1).getColumnNo();
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      doReturn(1689).when(detailAST1).getLineNo();
      doReturn("indentation.error.multi").when(detailAST1).toString();
      DetailAST detailAST2 = AbstractExpressionHandler.getFirstToken(detailAST1);
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      primordialHandler0.expandedTabsColumnNo(detailAST2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null).when(detailAST0).getNextSibling();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-663)).when(detailAST1).getColumnNo();
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      doReturn("indentation.child.error.multi").when(detailAST1).toString();
      DetailAST detailAST2 = AbstractExpressionHandler.getFirstToken(detailAST1);
      PackageDefHandler packageDefHandler0 = new PackageDefHandler(indentationCheck0, detailAST2, (AbstractExpressionHandler) null);
      CaseHandler caseHandler0 = new CaseHandler(indentationCheck0, detailAST2, packageDefHandler0);
      DoWhileHandler doWhileHandler0 = new DoWhileHandler(indentationCheck0, detailAST2, caseHandler0);
      // Undeclared exception!
      try { 
        doWhileHandler0.logError(detailAST2, "cZ!", 155, (IndentLevel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn("").when(indentationCheck0).getLine(anyInt());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(0).when(detailAST0).getLineNo();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      PackageDefHandler packageDefHandler0 = new PackageDefHandler(indentationCheck0, detailAST1, primordialHandler0);
      // Undeclared exception!
      try { 
        packageDefHandler0.isOnStartOfLine(detailAST1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      IndentationCheck indentationCheck1 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(indentationCheck1).getLine(anyInt());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(0).when(detailAST0).getLineNo();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      NewHandler newHandler0 = new NewHandler(indentationCheck1, detailAST1, primordialHandler0);
      // Undeclared exception!
      try { 
        newHandler0.isOnStartOfLine(detailAST1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null).when(detailAST0).getNextSibling();
      doReturn(0).when(detailAST0).getType();
      doReturn((String) null, (String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST2).getColumnNo();
      doReturn(detailAST1).when(detailAST2).getFirstChild();
      doReturn(detailAST1).when(detailAST2).getParent();
      doReturn("indentation.error.multi", "indentation.child.error").when(detailAST2).toString();
      DetailAST detailAST3 = AbstractExpressionHandler.getFirstToken(detailAST2);
      IfHandler ifHandler0 = new IfHandler(indentationCheck0, (DetailAST) null, (AbstractExpressionHandler) null);
      CaseHandler caseHandler0 = new CaseHandler(indentationCheck0, detailAST3, ifHandler0);
      ArrayInitHandler arrayInitHandler0 = new ArrayInitHandler(indentationCheck0, detailAST3, caseHandler0);
      // Undeclared exception!
      try { 
        arrayInitHandler0.getSuggestedChildIndent(ifHandler0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.puppycrawl.tools.checkstyle.checks.indentation.CaseHandler cannot be cast to com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.ArrayInitHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn("").when(indentationCheck0).getLine(anyInt());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null).when(detailAST0).getNextSibling();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST1).getColumnNo();
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      doReturn((-4847)).when(detailAST1).getLineNo();
      doReturn((-4847), (-2593), 3440).when(detailAST1).getType();
      doReturn("w8n`lp7%,").when(detailAST1).toString();
      DetailAST detailAST2 = AbstractExpressionHandler.getFirstToken(detailAST1);
      ClassDefHandler classDefHandler0 = new ClassDefHandler(indentationCheck0, detailAST2, (AbstractExpressionHandler) null);
      DoWhileHandler doWhileHandler0 = new DoWhileHandler(indentationCheck0, detailAST2, classDefHandler0);
      // Undeclared exception!
      try { 
        doWhileHandler0.getLineStart(detailAST2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(indentationCheck0).getLine(anyInt());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(0).when(detailAST0).getLineNo();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      IndexHandler indexHandler0 = new IndexHandler(indentationCheck0, detailAST1, (AbstractExpressionHandler) null);
      // Undeclared exception!
      try { 
        indexHandler0.getLineStart(detailAST1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn("").when(indentationCheck0).getLine(anyInt());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getNextSibling();
      doReturn((String) null, (String) null, (String) null, (String) null).when(detailAST0).toString();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(969).when(detailAST1).getColumnNo();
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      doReturn(detailAST0).when(detailAST1).getNextSibling();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(969).when(detailAST2).getColumnNo();
      doReturn(detailAST1).when(detailAST2).getFirstChild();
      DetailAST detailAST3 = AbstractExpressionHandler.getFirstToken(detailAST2);
      LabelHandler labelHandler0 = new LabelHandler(indentationCheck0, detailAST3, (AbstractExpressionHandler) null);
      // Undeclared exception!
      try { 
        labelHandler0.getLineStart(758);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(0, 0).when(detailAST0).getType();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      LabelHandler labelHandler0 = new LabelHandler(indentationCheck0, detailAST1, primordialHandler0);
      ElseHandler elseHandler0 = new ElseHandler(indentationCheck0, detailAST1, labelHandler0);
      MethodDefHandler methodDefHandler0 = new MethodDefHandler(indentationCheck0, detailAST1, elseHandler0);
      IndentationCheck indentationCheck1 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(indentationCheck1).getLine(anyInt());
      ImportHandler importHandler0 = new ImportHandler(indentationCheck1, detailAST1, methodDefHandler0);
      // Undeclared exception!
      try { 
        importHandler0.getLineStart(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DoWhileHandler doWhileHandler0 = new DoWhileHandler(indentationCheck0, (DetailAST) null, (AbstractExpressionHandler) null);
      // Undeclared exception!
      try { 
        doWhileHandler0.getIndentImpl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null).when(detailAST0).getNextSibling();
      doReturn(0).when(detailAST0).getType();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST1).getColumnNo();
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      doReturn(detailAST0).when(detailAST1).getParent();
      doReturn("indentation.error", "indentation.error.multi").when(detailAST1).toString();
      DetailAST detailAST2 = AbstractExpressionHandler.getFirstToken(detailAST1);
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      ArrayInitHandler arrayInitHandler0 = new ArrayInitHandler(indentationCheck0, detailAST2, primordialHandler0);
      ImportHandler importHandler0 = new ImportHandler(indentationCheck0, detailAST2, arrayInitHandler0);
      // Undeclared exception!
      try { 
        importHandler0.getIndent();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.puppycrawl.tools.checkstyle.checks.indentation.PrimordialHandler cannot be cast to com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.ArrayInitHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractExpressionHandler.getFirstToken((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractExpressionHandler.getFirstLine(14, (DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HandlerFactory handlerFactory0 = mock(HandlerFactory.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(handlerFactory0).isHandledType(anyInt());
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn("").when(indentationCheck0).getLine(anyInt());
      doReturn(handlerFactory0).when(indentationCheck0).getHandlerFactory();
      doReturn((-2012)).when(indentationCheck0).getIndentationTabWidth();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-386)).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null).when(detailAST0).getNextSibling();
      doReturn("switch").when(detailAST0).toString();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-386), 1).when(detailAST1).getColumnNo();
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      doReturn(1, 83).when(detailAST1).getLineNo();
      doReturn(1471, 1, 1, 1).when(detailAST1).getType();
      doReturn("indentation.error.multi").when(detailAST1).toString();
      DetailAST detailAST2 = AbstractExpressionHandler.getFirstToken(detailAST1);
      BlockParentHandler blockParentHandler0 = new BlockParentHandler(indentationCheck0, "indentation.error", detailAST2, (AbstractExpressionHandler) null);
      ClassDefHandler classDefHandler0 = new ClassDefHandler(indentationCheck0, detailAST2, blockParentHandler0);
      NewHandler newHandler0 = new NewHandler(indentationCheck0, detailAST2, classDefHandler0);
      SwitchHandler switchHandler0 = new SwitchHandler(indentationCheck0, detailAST2, newHandler0);
      Integer integer0 = new Integer((-168));
      LineSet lineSet0 = mock(LineSet.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(lineSet0).getStartColumn(anyInt());
      // Undeclared exception!
      try { 
        switchHandler0.findSubtreeLines(lineSet0, detailAST2, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn((HandlerFactory) null).when(indentationCheck0).getHandlerFactory();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(0).when(detailAST0).getType();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      IndentationCheck indentationCheck1 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck1);
      LambdaHandler lambdaHandler0 = new LambdaHandler(indentationCheck1, detailAST1, primordialHandler0);
      ForHandler forHandler0 = new ForHandler(indentationCheck1, detailAST1, lambdaHandler0);
      CatchHandler catchHandler0 = new CatchHandler(indentationCheck0, detailAST1, forHandler0);
      SwitchHandler switchHandler0 = new SwitchHandler(indentationCheck0, detailAST1, catchHandler0);
      // Undeclared exception!
      try { 
        switchHandler0.findSubtreeLines((LineSet) null, detailAST1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn("").when(indentationCheck0).getLine(anyInt());
      doReturn((-4847)).when(indentationCheck0).getIndentationTabWidth();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(1689).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null).when(detailAST0).getNextSibling();
      doReturn("indentation.child.error.multi").when(detailAST0).toString();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-2745), 610).when(detailAST1).getColumnNo();
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      doReturn(1689).when(detailAST1).getLineNo();
      doReturn("indentation.error.multi").when(detailAST1).toString();
      DetailAST detailAST2 = AbstractExpressionHandler.getFirstToken(detailAST1);
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      // Undeclared exception!
      try { 
        primordialHandler0.expandedTabsColumnNo(detailAST2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      IfHandler ifHandler0 = new IfHandler(indentationCheck0, (DetailAST) null, primordialHandler0);
      // Undeclared exception!
      try { 
        ifHandler0.expandedTabsColumnNo((DetailAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn((LineWrappingHandler) null).when(indentationCheck0).getLineWrappingHandler();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      // Undeclared exception!
      try { 
        primordialHandler0.checkWrappingIndentation(detailAST1, detailAST1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", "t6.%z3|q}X4MN{", "", "t6.%z3|q}X4MN{").when(indentationCheck0).getLine(anyInt());
      doReturn((-664), (-664), (-1159), (-4625)).when(indentationCheck0).getIndentationTabWidth();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-105), (-697), (-4625), 2923).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((-664), 24, (-3722), 1772).when(detailAST0).getLineNo();
      doReturn("").when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      primordialHandler0.checkRightParen(detailAST1, detailAST1);
      SlistHandler slistHandler0 = new SlistHandler(indentationCheck0, detailAST1, primordialHandler0);
      // Undeclared exception!
      try { 
        slistHandler0.checkRightParen(detailAST1, detailAST1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).findFirstToken(anyInt());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      CaseHandler caseHandler0 = new CaseHandler(indentationCheck0, detailAST1, (AbstractExpressionHandler) null);
      // Undeclared exception!
      try { 
        caseHandler0.checkModifiers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn("").when(indentationCheck0).getLine(anyInt());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getNextSibling();
      doReturn((String) null, (String) null, (String) null).when(detailAST0).toString();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(1282).when(detailAST1).getColumnNo();
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      doReturn(detailAST0).when(detailAST1).getNextSibling();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(1282).when(detailAST2).getLineNo();
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-3449), 0).when(detailAST3).getColumnNo();
      doReturn(detailAST1).when(detailAST3).getFirstChild();
      doReturn(detailAST2).when(detailAST3).getParent();
      doReturn("J%q", "(+Ad8m").when(detailAST3).toString();
      DetailAST detailAST4 = AbstractExpressionHandler.getFirstToken(detailAST3);
      LambdaHandler lambdaHandler0 = new LambdaHandler(indentationCheck0, detailAST4, (AbstractExpressionHandler) null);
      BlockParentHandler blockParentHandler0 = new BlockParentHandler(indentationCheck0, "indentation.child.error.multi", detailAST4, lambdaHandler0);
      // Undeclared exception!
      try { 
        blockParentHandler0.checkLeftParen(detailAST4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null).when(detailAST0).getParent();
      doReturn((String) null, (String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      LambdaHandler lambdaHandler0 = new LambdaHandler(indentationCheck0, detailAST1, (AbstractExpressionHandler) null);
      BlockParentHandler blockParentHandler0 = new BlockParentHandler(indentationCheck0, "indentation.child.error.multi", detailAST1, lambdaHandler0);
      // Undeclared exception!
      try { 
        blockParentHandler0.checkLeftParen(detailAST1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn((-4021)).when(indentationCheck0).getCaseIndent();
      doReturn("_<'c9d;:2`e4j%").when(indentationCheck0).toString();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getNextSibling();
      doReturn((String) null, (String) null, (String) null).when(detailAST0).toString();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-4021), (-1272), 2216).when(detailAST1).getColumnNo();
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      doReturn(detailAST0).when(detailAST1).getNextSibling();
      doReturn("_<'c9d;:2`e4j%").when(detailAST1).toString();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(2034).when(detailAST2).getColumnNo();
      doReturn(detailAST1).when(detailAST2).getFirstChild();
      DetailAST detailAST3 = AbstractExpressionHandler.getFirstToken(detailAST2);
      IndentationCheck indentationCheck1 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck1);
      CaseHandler caseHandler0 = new CaseHandler(indentationCheck0, detailAST3, primordialHandler0);
      // Undeclared exception!
      try { 
        caseHandler0.checkLeftParen(detailAST3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -4021
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn("indentation.child.error.multi", (String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      LabelHandler labelHandler0 = new LabelHandler(indentationCheck0, detailAST1, (AbstractExpressionHandler) null);
      BlockParentHandler blockParentHandler0 = new BlockParentHandler(indentationCheck0, "X~Bm2<#wetm", detailAST1, labelHandler0);
      // Undeclared exception!
      try { 
        blockParentHandler0.checkIndentation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn("").when(indentationCheck0).getLine(anyInt());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(0).when(detailAST0).getLineNo();
      doReturn(0, 0).when(detailAST0).getType();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      PackageDefHandler packageDefHandler0 = new PackageDefHandler(indentationCheck0, detailAST1, (AbstractExpressionHandler) null);
      MethodDefHandler methodDefHandler0 = new MethodDefHandler(indentationCheck0, detailAST1, packageDefHandler0);
      IndentationCheck indentationCheck1 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck1);
      IndentLevel indentLevel0 = primordialHandler0.getSuggestedChildIndent((AbstractExpressionHandler) null);
      // Undeclared exception!
      try { 
        methodDefHandler0.checkExpressionSubtree(detailAST1, indentLevel0, true, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(0).when(detailAST0).getLineNo();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getNextSibling();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST1).getColumnNo();
      doReturn(detailAST0, detailAST0).when(detailAST1).getFirstChild();
      doReturn((-4847)).when(detailAST1).getLineNo();
      doReturn("w8n`lp7%,").when(detailAST1).toString();
      DetailAST detailAST2 = AbstractExpressionHandler.getFirstToken(detailAST1);
      AbstractExpressionHandler.getFirstLine(14, detailAST2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(0).when(detailAST0).getLineNo();
      doReturn((String) null, (String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      CatchHandler catchHandler0 = new CatchHandler(indentationCheck0, detailAST1, (AbstractExpressionHandler) null);
      IndentationCheck indentationCheck1 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(indentationCheck1).getLine(anyInt());
      NewHandler newHandler0 = new NewHandler(indentationCheck1, detailAST1, catchHandler0);
      // Undeclared exception!
      try { 
        newHandler0.getIndent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      PackageDefHandler packageDefHandler0 = new PackageDefHandler(indentationCheck0, (DetailAST) null, (AbstractExpressionHandler) null);
      LabelHandler labelHandler0 = new LabelHandler(indentationCheck0, (DetailAST) null, packageDefHandler0);
      LambdaHandler lambdaHandler0 = new LambdaHandler(indentationCheck0, (DetailAST) null, labelHandler0);
      // Undeclared exception!
      try { 
        labelHandler0.getSuggestedChildIndent(lambdaHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(indentationCheck0).getLine(anyInt());
      doReturn(0).when(indentationCheck0).getIndentationTabWidth();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(0).when(detailAST0).getLineNo();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      primordialHandler0.checkLeftParen(detailAST1);
      primordialHandler0.getIndent();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null, (DetailAST) null, (DetailAST) null, (DetailAST) null, (DetailAST) null).when(detailAST0).findFirstToken(anyInt());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null).when(detailAST0).getParent();
      doReturn(0, 0, 0).when(detailAST0).getType();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      ClassDefHandler classDefHandler0 = new ClassDefHandler(indentationCheck0, detailAST1, primordialHandler0);
      CatchHandler catchHandler0 = new CatchHandler(indentationCheck0, detailAST1, classDefHandler0);
      SwitchHandler switchHandler0 = new SwitchHandler(indentationCheck0, detailAST1, catchHandler0);
      ArrayInitHandler arrayInitHandler0 = new ArrayInitHandler(indentationCheck0, detailAST1, switchHandler0);
      // Undeclared exception!
      try { 
        arrayInitHandler0.checkIndentation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.ArrayInitHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(601).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null).when(detailAST0).getNextSibling();
      doReturn("iCXD_C/").when(detailAST0).toString();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).findFirstToken(anyInt());
      doReturn(601).when(detailAST1).getColumnNo();
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      doReturn("@c").when(detailAST1).toString();
      DetailAST detailAST2 = AbstractExpressionHandler.getFirstToken(detailAST1);
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      IndentationCheck indentationCheck1 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      CaseHandler caseHandler0 = new CaseHandler(indentationCheck1, detailAST2, primordialHandler0);
      caseHandler0.checkModifiers();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HandlerFactory handlerFactory0 = mock(HandlerFactory.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(handlerFactory0).isHandledType(anyInt());
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(indentationCheck0).getLine(anyInt());
      doReturn(handlerFactory0).when(indentationCheck0).getHandlerFactory();
      doReturn(0).when(indentationCheck0).getIndentationTabWidth();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null).when(detailAST0).getNextSibling();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(detailAST1).getColumnNo();
      doReturn(detailAST0, (DetailAST) null).when(detailAST1).getFirstChild();
      doReturn(0, 0).when(detailAST1).getLineNo();
      doReturn(4936, 4936, 1575, 4936).when(detailAST1).getType();
      doReturn("/*").when(detailAST1).toString();
      DetailAST detailAST2 = AbstractExpressionHandler.getFirstToken(detailAST1);
      BlockParentHandler blockParentHandler0 = new BlockParentHandler(indentationCheck0, "indentation.error", detailAST2, (AbstractExpressionHandler) null);
      ClassDefHandler classDefHandler0 = new ClassDefHandler(indentationCheck0, detailAST2, blockParentHandler0);
      NewHandler newHandler0 = new NewHandler(indentationCheck0, detailAST2, classDefHandler0);
      SwitchHandler switchHandler0 = new SwitchHandler(indentationCheck0, detailAST2, newHandler0);
      ElseHandler elseHandler0 = new ElseHandler(indentationCheck0, detailAST2, switchHandler0);
      LineSet lineSet0 = mock(LineSet.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(lineSet0).getStartColumn(anyInt());
      switchHandler0.findSubtreeLines(lineSet0, detailAST2, false);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HandlerFactory handlerFactory0 = mock(HandlerFactory.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(handlerFactory0).isHandledType(anyInt());
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn(handlerFactory0).when(indentationCheck0).getHandlerFactory();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(0, 0, 0, 0).when(detailAST0).getType();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      BlockParentHandler blockParentHandler0 = new BlockParentHandler(indentationCheck0, "indentation.error", detailAST1, (AbstractExpressionHandler) null);
      ClassDefHandler classDefHandler0 = new ClassDefHandler(indentationCheck0, detailAST1, blockParentHandler0);
      NewHandler newHandler0 = new NewHandler(indentationCheck0, detailAST1, classDefHandler0);
      SwitchHandler switchHandler0 = new SwitchHandler(indentationCheck0, detailAST1, newHandler0);
      LineSet lineSet0 = mock(LineSet.class, new ViolatedAssumptionAnswer());
      switchHandler0.findSubtreeLines(lineSet0, detailAST1, false);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn("V\"c").when(indentationCheck0).getLine(anyInt());
      doReturn((HandlerFactory) null).when(indentationCheck0).getHandlerFactory();
      doReturn(0).when(indentationCheck0).getIndentationTabWidth();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(0).when(detailAST0).getLineNo();
      doReturn(0, 0, 0).when(detailAST0).getType();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      PackageDefHandler packageDefHandler0 = new PackageDefHandler(indentationCheck0, detailAST1, (AbstractExpressionHandler) null);
      MethodDefHandler methodDefHandler0 = new MethodDefHandler(indentationCheck0, detailAST1, packageDefHandler0);
      IndentationCheck indentationCheck1 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck1);
      IndentLevel indentLevel0 = primordialHandler0.getSuggestedChildIndent((AbstractExpressionHandler) null);
      // Undeclared exception!
      try { 
        methodDefHandler0.checkExpressionSubtree(detailAST1, indentLevel0, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(0).when(detailAST0).getLineNo();
      doReturn(0).when(detailAST0).getType();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      IndentationCheck indentationCheck1 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(indentationCheck1).getBasicOffset();
      doReturn((HandlerFactory) null).when(indentationCheck1).getHandlerFactory();
      SlistHandler slistHandler0 = new SlistHandler(indentationCheck1, detailAST1, primordialHandler0);
      IndentLevel indentLevel0 = slistHandler0.getSuggestedChildIndent(primordialHandler0);
      // Undeclared exception!
      try { 
        slistHandler0.checkExpressionSubtree(detailAST1, indentLevel0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getNextSibling();
      doReturn(0).when(detailAST0).getType();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-663)).when(detailAST1).getColumnNo();
      doReturn(detailAST0, detailAST0).when(detailAST1).getFirstChild();
      doReturn("}.DwC8qKV+JO[").when(detailAST1).toString();
      DetailAST detailAST2 = AbstractExpressionHandler.getFirstToken(detailAST1);
      PackageDefHandler packageDefHandler0 = new PackageDefHandler(indentationCheck0, detailAST2, (AbstractExpressionHandler) null);
      int[] intArray0 = new int[4];
      intArray0[0] = 16;
      intArray0[1] = 96;
      intArray0[2] = 96;
      intArray0[3] = (-2292);
      packageDefHandler0.checkChildren(detailAST2, intArray0, (IndentLevel) null, true, true);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn((HandlerFactory) null).when(indentationCheck0).getHandlerFactory();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(0).when(detailAST0).getLineNo();
      doReturn((DetailAST) null).when(detailAST0).getNextSibling();
      doReturn(0, 0).when(detailAST0).getType();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-663)).when(detailAST1).getColumnNo();
      doReturn(detailAST0, detailAST0).when(detailAST1).getFirstChild();
      doReturn("}.DwC8qKV+JO[").when(detailAST1).toString();
      DetailAST detailAST2 = AbstractExpressionHandler.getFirstToken(detailAST1);
      PackageDefHandler packageDefHandler0 = new PackageDefHandler(indentationCheck0, detailAST2, (AbstractExpressionHandler) null);
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        packageDefHandler0.checkChildren(detailAST2, intArray0, (IndentLevel) null, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LineWrappingHandler lineWrappingHandler0 = mock(LineWrappingHandler.class, new ViolatedAssumptionAnswer());
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "org.apache.commons.beanutils.BeanUtilsBean", ";Y1,)b", "  setProperty(", (String) null).when(indentationCheck0).getLine(anyInt());
      doReturn(1, 1, (-2792), 1).when(indentationCheck0).getIndentationTabWidth();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(0, 0, 0, 0, 0).when(detailAST0).getLineNo();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      primordialHandler0.checkRightParen(detailAST1, detailAST1);
      SlistHandler slistHandler0 = new SlistHandler(indentationCheck0, detailAST1, primordialHandler0);
      slistHandler0.checkRightParen(detailAST1, detailAST1);
      // Undeclared exception!
      try { 
        slistHandler0.getLineStart(detailAST1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn("SsjGAh+r+H18HI}]{", "raen").when(indentationCheck0).getLine(anyInt());
      doReturn((-168), (-168)).when(indentationCheck0).getIndentationTabWidth();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      primordialHandler0.getIndentImpl();
      IndentationCheck indentationCheck1 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null, (DetailAST) null, (DetailAST) null, (DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null, (DetailAST) null, (DetailAST) null).when(detailAST0).getNextSibling();
      doReturn((String) null, (String) null, (String) null, (String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-168), 0, 0).when(detailAST2).getColumnNo();
      doReturn(detailAST1, detailAST1).when(detailAST2).getFirstChild();
      doReturn(detailAST1).when(detailAST2).getNextSibling();
      doReturn("ADcL_ej=AF", "indentation.child.error.multi").when(detailAST2).toString();
      DetailAST detailAST3 = AbstractExpressionHandler.getFirstToken(detailAST2);
      DetailAST detailAST4 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-168), (-168), 1, 0).when(detailAST4).getColumnNo();
      doReturn(detailAST3).when(detailAST4).getFirstChild();
      doReturn((-1542), (-1542)).when(detailAST4).getLineNo();
      doReturn("$\"+P7g=ce!Q").when(detailAST4).toString();
      DetailAST detailAST5 = AbstractExpressionHandler.getFirstToken(detailAST4);
      primordialHandler0.checkRightParen(detailAST5, detailAST5);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(0).when(detailAST0).getLineNo();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      ImportHandler importHandler0 = new ImportHandler((IndentationCheck) null, detailAST1, primordialHandler0);
      // Undeclared exception!
      try { 
        importHandler0.logError(detailAST1, "", 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(0).when(detailAST0).getLineNo();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      primordialHandler0.logError(detailAST1, "indentation.child.error.multi", 5);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HandlerFactory handlerFactory0 = mock(HandlerFactory.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(handlerFactory0).isHandledType(anyInt());
      HandlerFactory handlerFactory1 = mock(HandlerFactory.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(handlerFactory1).isHandledType(anyInt());
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn("", "bJQ|{!9FCja;U2f2", (String) null).when(indentationCheck0).getLine(anyInt());
      doReturn(handlerFactory0, handlerFactory1).when(indentationCheck0).getHandlerFactory();
      doReturn(3387, 3387).when(indentationCheck0).getIndentationTabWidth();
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getNextSibling();
      doReturn((String) null, (String) null).when(detailAST0).toString();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-3134), 3387).when(detailAST2).getColumnNo();
      doReturn(detailAST0).when(detailAST2).getFirstChild();
      doReturn(detailAST0).when(detailAST2).getNextSibling();
      doReturn("0.0").when(detailAST2).toString();
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST3).findFirstToken(anyInt());
      doReturn(0).when(detailAST3).getColumnNo();
      doReturn((DetailAST) null).when(detailAST3).getFirstChild();
      doReturn(0, 0).when(detailAST3).getLineNo();
      doReturn((DetailAST) null).when(detailAST3).getNextSibling();
      doReturn(0).when(detailAST3).getType();
      DetailAST detailAST4 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-1272), (-250), 0).when(detailAST4).getColumnNo();
      doReturn(detailAST2, detailAST3).when(detailAST4).getFirstChild();
      doReturn(662, (-250), 0).when(detailAST4).getLineNo();
      doReturn(detailAST3).when(detailAST4).getParent();
      doReturn(1471, 1, 1, 1).when(detailAST4).getType();
      doReturn("indentation.error.multi", "lparen", (String) null, (String) null).when(detailAST4).toString();
      DetailAST detailAST5 = AbstractExpressionHandler.getFirstToken(detailAST4);
      BlockParentHandler blockParentHandler0 = new BlockParentHandler(indentationCheck0, "indentation.error", detailAST5, (AbstractExpressionHandler) null);
      ClassDefHandler classDefHandler0 = new ClassDefHandler(indentationCheck0, detailAST5, blockParentHandler0);
      NewHandler newHandler0 = new NewHandler(indentationCheck0, detailAST5, classDefHandler0);
      SwitchHandler switchHandler0 = new SwitchHandler(indentationCheck0, detailAST5, newHandler0);
      ElseHandler elseHandler0 = new ElseHandler(indentationCheck0, detailAST5, switchHandler0);
      Integer integer0 = new Integer(3387);
      Integer integer1 = new Integer(3387);
      LineSet lineSet0 = mock(LineSet.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, integer1).when(lineSet0).getStartColumn(anyInt());
      switchHandler0.findSubtreeLines(lineSet0, detailAST5, false);
      // Undeclared exception!
      try { 
        elseHandler0.checkTopLevelToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      SwitchHandler switchHandler0 = new SwitchHandler(indentationCheck0, detailAST1, primordialHandler0);
      switchHandler0.shouldIncreaseIndent();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(indentationCheck0).getLine(anyInt());
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      primordialHandler0.getIndentImpl();
      IndentationCheck indentationCheck1 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(detailAST0).getColumnNo();
      doReturn((DetailAST) null, (DetailAST) null, (DetailAST) null).when(detailAST0).getFirstChild();
      doReturn(0).when(detailAST0).getLineNo();
      doReturn((DetailAST) null, (DetailAST) null).when(detailAST0).getNextSibling();
      doReturn((String) null, (String) null, (String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((-946), 193).when(detailAST2).getColumnNo();
      doReturn(detailAST1).when(detailAST2).getFirstChild();
      doReturn(detailAST1).when(detailAST2).getNextSibling();
      doReturn((String) null).when(detailAST2).toString();
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST4 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(detailAST4).getColumnNo();
      doReturn(detailAST2).when(detailAST4).getFirstChild();
      doReturn((String) null).when(detailAST4).toString();
      AbstractExpressionHandler.getFirstToken(detailAST4);
      // Undeclared exception!
      try { 
        primordialHandler0.isOnStartOfLine(detailAST1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getFirstChild();
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = AbstractExpressionHandler.getFirstToken(detailAST0);
      LineWrappingHandler lineWrappingHandler0 = mock(LineWrappingHandler.class, new ViolatedAssumptionAnswer());
      IndentationCheck indentationCheck0 = mock(IndentationCheck.class, new ViolatedAssumptionAnswer());
      doReturn(lineWrappingHandler0).when(indentationCheck0).getLineWrappingHandler();
      PrimordialHandler primordialHandler0 = new PrimordialHandler(indentationCheck0);
      primordialHandler0.checkWrappingIndentation(detailAST1, detailAST1);
      assertEquals(0, detailAST1.getNumberOfChildren());
  }
}
