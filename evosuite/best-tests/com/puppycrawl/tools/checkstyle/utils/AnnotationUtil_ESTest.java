/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 26 16:07:08 GMT 2020
 */

package com.puppycrawl.tools.checkstyle.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.utils.AnnotationUtil;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AnnotationUtil_ESTest extends AnnotationUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).getNextSibling();
      doReturn(0).when(detailAST0).getType();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).getNextSibling();
      doReturn(163).when(detailAST1).getType();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST1).when(detailAST2).getFirstChild();
      doReturn("HR`U=rCk\"g7j#&X").when(detailAST2).toString();
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST2).when(detailAST3).findFirstToken(anyInt());
      doReturn(1618, 1).when(detailAST3).getType();
      boolean boolean0 = AnnotationUtil.containsAnnotation(detailAST3, "&gt;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).findFirstToken(anyInt());
      doReturn(159).when(detailAST0).getType();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).getFirstChild();
      doReturn("").when(detailAST1).toString();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST1).when(detailAST2).findFirstToken(anyInt());
      doReturn(2476, (-676)).when(detailAST2).getType();
      // Undeclared exception!
      try { 
        AnnotationUtil.getAnnotation(detailAST2, ";A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.AnnotationUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).findFirstToken(anyInt());
      doReturn(0, 0).when(detailAST0).getType();
      // Undeclared exception!
      try { 
        AnnotationUtil.containsAnnotation(detailAST0, "V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.AnnotationUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        AnnotationUtil.containsAnnotation((DetailAST) null, "rm{#<D~R@hIbBnd2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the ast is null
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.AnnotationUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        AnnotationUtil.getAnnotation((DetailAST) null, "G_o6vEmB|1r_8/M:XI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the ast is null
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.AnnotationUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST1).findFirstToken(anyInt());
      doReturn(159).when(detailAST1).getType();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST1).when(detailAST2).getFirstChild();
      doReturn("").when(detailAST2).toString();
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST2).when(detailAST3).findFirstToken(anyInt());
      doReturn(2476, (-676)).when(detailAST3).getType();
      // Undeclared exception!
      try { 
        AnnotationUtil.getAnnotation(detailAST3, ";A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.AnnotationUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        AnnotationUtil.getAnnotation(detailAST0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the annotation is empty or spaces
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.AnnotationUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        AnnotationUtil.getAnnotation(detailAST0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the annotation is null
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.AnnotationUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).findFirstToken(anyInt());
      doReturn(158, 16).when(detailAST1).getType();
      DetailAST detailAST2 = AnnotationUtil.getAnnotationHolder(detailAST1);
      assertEquals(0, detailAST2.getType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).findFirstToken(anyInt());
      doReturn(155).when(detailAST0).getType();
      DetailAST detailAST1 = AnnotationUtil.getAnnotationHolder(detailAST0);
      assertNull(detailAST1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        AnnotationUtil.getAnnotationHolder((DetailAST) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the ast is null
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.AnnotationUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        AnnotationUtil.containsAnnotation((DetailAST) null, (List<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the ast is null
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.AnnotationUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(detailAST0).toString();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).findFirstToken(anyInt());
      doReturn((-3061), (-3061)).when(detailAST1).getType();
      DetailAST detailAST2 = AnnotationUtil.getAnnotationHolder(detailAST1);
      // Undeclared exception!
      try { 
        AnnotationUtil.containsAnnotation(detailAST2, (List<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // annotations cannot be null
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.AnnotationUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).findFirstToken(anyInt());
      doReturn("").when(detailAST0).toString();
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).findFirstToken(anyInt());
      doReturn(108, 108).when(detailAST1).getType();
      boolean boolean0 = AnnotationUtil.containsAnnotation(detailAST1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn((DetailAST) null).when(detailAST0).findFirstToken(anyInt());
      doReturn(0, 0).when(detailAST0).getType();
      boolean boolean0 = AnnotationUtil.containsAnnotation(detailAST0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        AnnotationUtil.containsAnnotation((DetailAST) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the ast is null
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.AnnotationUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DetailAST detailAST0 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      DetailAST detailAST1 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST0).when(detailAST1).findFirstToken(anyInt());
      doReturn("VqX9%R[26l.{JR{u'").when(detailAST1).toString();
      DetailAST detailAST2 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST1).when(detailAST2).findFirstToken(anyInt());
      doReturn((-986), (-986)).when(detailAST2).getType();
      doReturn("the ast is null").when(detailAST2).toString();
      DetailAST detailAST3 = mock(DetailAST.class, new ViolatedAssumptionAnswer());
      doReturn(detailAST2).when(detailAST3).findFirstToken(anyInt());
      doReturn(362, 362).when(detailAST3).getType();
      DetailAST detailAST4 = AnnotationUtil.getAnnotationHolder(detailAST3);
      boolean boolean0 = AnnotationUtil.containsAnnotation(detailAST4);
      assertEquals((-986), detailAST4.getType());
      assertTrue(boolean0);
  }
}
